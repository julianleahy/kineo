{"version":3,"sources":["../../core/js/models/lockingModel.js","../../core/js/wait.js","../../core/js/adapt.js","../../core/js/adaptCollection.js","../../core/js/startController.js","../../core/js/enums/logLevelEnum.js","../../core/js/logging.js","../../core/js/models/buildModel.js","../../core/js/models/adaptModel.js","../../core/js/models/articleModel.js","../../core/js/models/blockModel.js","../../core/js/models/configModel.js","../../core/js/models/contentObjectModel.js","../../core/js/models/componentModel.js","../../core/js/models/courseModel.js","../../core/js/enums/buttonStateEnum.js","../../core/js/models/questionModel.js","../../core/js/views/accessibilityView.js","../../core/js/views/navigationView.js","../../core/js/accessibility.js","../../core/js/offlineStorage.js","../../core/js/enums/completionStateEnum.js","../../core/js/tracking.js","../../core/js/device.js","../../core/js/views/drawerView.js","../../core/js/drawer.js","../../core/js/views/notifyView.js","../../core/js/views/notifyPushView.js","../../core/js/models/notifyModel.js","../../core/js/notify.js","../../core/js/popupManager.js","../../core/js/models/routerModel.js","../../core/js/views/adaptView.js","../../core/js/views/blockView.js","../../core/js/views/articleView.js","../../core/js/views/pageView.js","../../core/js/router.js","../../core/js/helpers.js","../../core/js/views/componentView.js","../../components/adapt-contrib-graphic/js/adapt-contrib-graphic.js","../../core/js/views/buttonsView.js","../../core/js/views/questionView.js","../../components/adapt-contrib-mcq/js/mcqView.js","../../components/adapt-contrib-mcq/js/mcqModel.js","../../components/adapt-contrib-mcq/js/adapt-contrib-mcq.js","../../components/adapt-contrib-text/js/adapt-contrib-text.js","../../extensions/adapt-contrib-tutor/js/adapt-contrib-tutor.js","../../core/js/views/menuView.js","../../menu/adapt-contrib-boxmenu/js/adapt-contrib-boxmenu.js","../../theme/adapt-kineo-theme/js/themeView.js","../../theme/adapt-kineo-theme/js/themePageView.js","../../theme/adapt-kineo-theme/js/themeArticleView.js","../../theme/adapt-kineo-theme/js/themeBlockView.js","../../theme/adapt-kineo-theme/js/theme.js","../../plugins.js","../../core/js/app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChhdhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACflVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzlcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrhjxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpzviplOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvfile":"adapt.min.js","sourcesContent":["define('core/js/models/lockingModel',[],function() {\n\n\tvar set = Backbone.Model.prototype.set;\n\n\t_.extend(Backbone.Model.prototype, {\n\n\t\tset: function(attrName, attrVal, options) {\n\t\t\tvar stopProcessing = !this.lockedAttributes || typeof attrName === \"object\" || typeof attrVal !== \"boolean\" || !this.isLocking(attrName);\n\t\t\tif (stopProcessing) return set.apply(this, arguments);\n\t\t\t\n\t\t\toptions = options || {};\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to change a locked attribute\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tvar pluginName  = options.pluginName;\n\t\t\tif (this.defaults[attrName] !== undefined) {\n\t\t\t\tthis.lockedAttributes[attrName] = !this.defaults[attrName];\n\t\t\t}\n\t\t\tvar lockingValue = this.lockedAttributes[attrName];\n\t\t\tvar isAttemptingToLock = (lockingValue === attrVal);\n\n\t\t\tif (isAttemptingToLock) {\n\n\t\t\t\tthis.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});\n\n\t\t\t\t//console.log(options.pluginName, \"locking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, lockingValue);\n\n\t\t\t}\n\n\t\t\tthis.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});\n\n\t\t\tvar totalLockValue = this.getLockCount(attrName, {skipcheck: true});\n\t\t\t//console.log(options.pluginName, \"attempting to unlock\", attrName, \"on\", this.get(\"_id\"), \"lockValue\", totalLockValue, this._lockedAttributesValues[attrName]);\n\t\t\tif (totalLockValue === 0) {\n\t\t\t\t//console.log(options.pluginName, \"unlocking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, !lockingValue);\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLocking: function(attrName, defaultLockValue) {\n\t\t\tif (this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) this.lockedAttributes = {};\n\t\t\tthis.lockedAttributes[attrName] = defaultLockValue;\n\t\t},\n\n\t\tunsetLocking: function(attrName) {\n\t\t\tif (!this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) return;\n\t\t\tdelete this.lockedAttributes[attrName];\n\t\t\tdelete this._lockedAttributesValues[attrName];\n\t\t\tif (_.keys(this.lockedAttributes).length === 0) {\n\t\t\t\tdelete this.lockedAttributes;\n\t\t\t\tdelete this._lockedAttributesValues;\n\t\t\t}\n\t\t},\n\n\t\tisLocking: function(attrName) {\n\t\t\tvar isCheckingGeneralLockingState = (attrName === undefined);\n\t\t\tvar isUsingLockedAttributes = (this.lockedAttributes !== undefined);\n\n\t\t\tif (isCheckingGeneralLockingState) {\n\t\t\t\treturn isUsingLockedAttributes;\n\t\t\t}\n\n\t\t\tif (!isUsingLockedAttributes) return false;\n\n\t\t\tvar isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;\n\t\t\tif (!isAttributeALockingAttribute) return false;\n\n\t\t\tif (this._lockedAttributesValues === undefined) {\n\t\t\t\tthis._lockedAttributesValues = {};\n\t\t\t}\n\n\t\t\tif (this._lockedAttributesValues[attrName] === undefined) {\n\t\t\t\tthis._lockedAttributesValues[attrName] = {};\t\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tisLocked: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\treturn this.getLockCount(attrName) > 0;\n\t\t},\n\n\t\tgetLockCount: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\tvar isGettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (isGettingValueForSpecificPlugin) {\n\n\t\t\t\treturn this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;\n\t\t\t}\n\n\t\t\tvar lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);\n\t\t\tvar lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);\n\t\t\t\n\t\t\treturn lockingAttributeValuesSum;\n\t\t},\n\n\t\tsetLockState: function(attrName, value, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return this;\n\t\t\t}\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to set a locked attribute lock value\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tthis._lockedAttributesValues[attrName][options.pluginName] = value;\n\t\t\t} else {\n\t\t\t\tdelete this._lockedAttributesValues[attrName][options.pluginName];\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t});\n\n});\n\n","define('core/js/wait',[],function() {\n\n     var Wait = Backbone.Controller.extend({\n\n        initialize: function() {\n            _.bindAll(this, \"begin\", \"end\");\n        },\n\n        _waitCount: 0,\n        _callbackHandle: null,\n\n        /**\n         * Returns true if there are items in the waiting count.\n         * \n         * @return {Boolean}\n         */\n        isWaiting: function() {\n            return (this._waitCount !== 0);\n        },\n\n        /**\n         * Add one item to the waiting count.\n         * \n         * @return {Object}\n         */\n        begin: function() {\n\n            if (!this.isWaiting()) {\n                this.trigger(\"wait\");\n            }\n\n            this._waitCount++;\n\n            if (this._callbackHandle) {\n                clearTimeout(this._callbackHandle);\n                this._callbackHandle = null;\n            }\n\n            return this;\n\n        },\n\n        /**\n         * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.\n         * \n         * @return {Object}\n         */\n        end: function() {\n\n            if (!this.isWaiting()) {\n                return this;\n            }\n\n            this._waitCount--;\n\n            if (this.isWaiting()) {\n                return this;\n            }\n            \n            if (this._callbackHandle) {\n                return this;\n            }\n\n            this._callbackHandle = setTimeout(function() {\n\n                this._callbackHandle = null;\n                this.trigger(\"ready\");\n\n            }.bind(this), 0);\n\n            return this;\n\n        },\n\n        /**\n         * Queue this function until all open waits have been ended.\n         * \n         * @param  {Function} callback\n         * @return {Object}\n         */\n        queue: function(callback) {\n\n            this.begin();\n            this.once(\"ready\", callback);\n            this.end();\n\n            return this;\n\n        },\n\n        /**\n         * Wait for this asynchonous function to execute before triggering ready event.\n         * \n         * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argiument, done(). ]\n         * @return {Object}\n         */\n        for: function(callback) {\n\n            this.begin();\n            _.defer(function() {\n                callback(this.end);\n            }.bind(this));\n\n            return this;\n\n        }\n\n    });\n\n    return Wait;\n\n});\n","define('core/js/adapt',[\n    'core/js/models/lockingModel',\n    'core/js/wait'\n], function(lockingModel, Wait) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canScroll: true, //to stop scrollTo behaviour,\n            _outstandingCompletionChecks: 0,\n            _pluginWaitCount:0,\n            _isStarted: false\n        },\n\n        lockedAttributes: {\n            _canScroll: false\n        },\n\n        initialize: function () {\n            this.setupWait();\n        },\n\n        //call when entering an asynchronous completion check\n        checkingCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", ++outstandingChecks);\n        },\n\n        //call when exiting an asynchronous completion check\n        checkedCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", --outstandingChecks);\n        },\n\n        //wait until there are no outstanding completion checks\n        deferUntilCompletionChecked: function(callback) {\n\n            if (this.get(\"_outstandingCompletionChecks\") === 0) return callback();\n\n            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {\n                if (outstandingChecks !== 0) return;\n\n                Adapt.off(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n                callback();\n            };\n\n            Adapt.on(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n        },\n\n        setupWait: function() {\n\n            this.wait = new Wait();\n\n            // Setup legcay events and handlers\n            var beginWait = function () {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future\");\n                this.wait.begin();\n            }.bind(this);\n\n            var endWait = function() {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future\");\n                this.wait.end();\n            }.bind(this);\n\n            var ready = function() {\n\n                if (this.wait.isWaiting()) {\n                    return;\n                }\n\n                var isEventListening = (this._events['plugins:ready']);\n                if (!isEventListening) {\n                    return;\n                }\n\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future\");\n                this.trigger('plugins:ready');\n\n            }.bind(this);\n\n            this.listenTo(this.wait, \"ready\", ready);\n            this.listenTo(this, {\n                'plugin:beginWait': beginWait,\n                'plugin:endWait': endWait\n            });\n\n        },\n\n        isWaitingForPlugins:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future\");\n            return this.wait.isWaiting();\n        },\n\n        checkPluginsReady:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future\");\n            if (this.isWaitingForPlugins()) {\n                return;\n            }\n            this.trigger('plugins:ready');\n        }\n\n    });\n\n    var Adapt = new AdaptModel();\n\n    Adapt.location = {};\n    Adapt.componentStore = {};\n    Adapt.mappedIds = {};\n\n    Adapt.loadScript = window.__loadScript;\n\n    Adapt.initialize = function() {\n\n        //wait until no more completion checking\n        Adapt.deferUntilCompletionChecked(function() {\n\n            //start adapt in a full restored state\n            Adapt.trigger('adapt:start');\n\n            if (!Backbone.History.started) {\n                Backbone.history.start();\n            }\n\n            Adapt.set(\"_isStarted\", true);\n\n            Adapt.trigger('adapt:initialize');\n\n        });\n\n    };\n\n    Adapt.scrollTo = function(selector, settings) {\n        // Get the current location - this is set in the router\n        var location = (Adapt.location._contentType) ?\n            Adapt.location._contentType : Adapt.location._currentLocation;\n        // Trigger initial scrollTo event\n        Adapt.trigger(location+':scrollTo', selector);\n        //Setup duration variable passed upon arguments\n        var settings = (settings || {});\n        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n        if (disableScrollToAnimation) {\n            settings.duration = 0;\n        }\n        else if (!settings.duration) {\n            settings.duration = $.scrollTo.defaults.duration;\n        }\n\n        var offsetTop = -$(\".navigation\").outerHeight();\n        // prevent scroll issue when component description aria-label coincident with top of component\n        if (Adapt.config.get('_accessibility')._isActive &&\n            $(selector).hasClass('component')) {\n            offsetTop -= $(selector).find('.aria-label').height() || 0;\n        }\n\n        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };\n        if (settings.offset.top === undefined) settings.offset.top = offsetTop;\n        if (settings.offset.left === undefined) settings.offset.left = 0;\n\n        if (settings.offset.left === 0) settings.axis = \"y\";\n\n        if (Adapt.get(\"_canScroll\") !== false) {\n            // Trigger scrollTo plugin\n            $.scrollTo(selector, settings);\n        }\n\n        // Trigger an event after animation\n        // 300 milliseconds added to make sure queue has finished\n        _.delay(function() {\n            $(selector).a11y_focus();\n            Adapt.trigger(location+':scrolledTo', selector);\n        }, settings.duration+300);\n\n    };\n\n    Adapt.navigateToElement = function(selector, settings) {\n        // Allows a selector to be passed in and Adapt will navigate to this element\n\n        // Setup settings object\n        var settings = (settings || {});\n\n        // Removes . symbol from the selector to find the model\n        var currentModelId = selector.replace(/\\./g, '');\n        var currentModel = Adapt.findById(currentModelId);\n        // Get current page to check whether this is the current page\n        var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');\n\n        // If current page - scrollTo element\n        if (currentPage.get('_id') === Adapt.location._currentId) {\n           return Adapt.scrollTo(selector, settings);\n        }\n\n        // If the element is on another page navigate and wait until pageView:ready is fired\n        // Then scrollTo element\n        Adapt.once('pageView:ready', function() {\n            _.defer(function() {\n                Adapt.scrollTo(selector, settings);\n            });\n        });\n\n        var shouldReplaceRoute = settings.replace || false;\n\n        Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});\n    };\n\n    Adapt.register = function(name, object) {\n        // Used to register components\n        // Store the component view\n        if (Adapt.componentStore[name])\n            throw Error('The component \"' + name + '\" already exists in your project');\n\n        if (object.view) {\n            //use view+model object\n            if(!object.view.template) object.view.template = name;\n        } else {\n            //use view object\n            if(!object.template) object.template = name;\n        }\n\n        Adapt.componentStore[name] = object;\n\n        return object;\n    };\n\n    // Used to map ids to collections\n    Adapt.setupMapping = function() {\n        // Clear any existing mappings.\n        Adapt.mappedIds = {};\n\n        // Setup course Id\n        Adapt.mappedIds[Adapt.course.get('_id')] = \"course\";\n\n        // Setup each collection\n        var collections = [\"contentObjects\", \"articles\", \"blocks\", \"components\"];\n\n        for (var i = 0, len = collections.length; i < len; i++) {\n            var collection = collections[i];\n            var models = Adapt[collection].models;\n            for (var j = 0, lenj = models.length; j < lenj; j++) {\n                var model = models[j];\n                Adapt.mappedIds[model.get('_id')] = collection;\n\n            }\n        }\n\n    };\n\n    Adapt.mapById = function(id) {\n        // Returns collection name that contains this models Id\n        return Adapt.mappedIds[id];\n    };\n\n    Adapt.findById = function(id) {\n\n        // Return a model\n        // Checks if the Id passed in is the course Id\n        if (id === Adapt.course.get('_id')) {\n            return Adapt.course;\n        }\n\n        var collectionType = Adapt.mapById(id);\n\n        if (!collectionType) {\n            console.warn('Adapt.findById() unable to find collection type for id: ' + id);\n            return;\n        }\n\n        return Adapt[collectionType]._byAdaptID[id][0];\n\n    };\n\n    // Relative strings describe the number and type of hops in the model hierarchy\n    //\n    // \"@component +1\" means to move one component forward from the current model\n    // This function would return the following:\n    // {\n    //       type: \"component\",\n    //       offset: 1\n    // }\n    // Trickle uses this function to determine where it should scrollTo after it unlocks\n    Adapt.parseRelativeString = function(relativeString) {\n\n        if (relativeString[0] === \"@\") {\n            relativeString = relativeString.substr(1);\n        }\n\n        var type = relativeString.match(/(component|block|article|page|menu)/);\n        if (!type) {\n            Adapt.log.error(\"Adapt.parseRelativeString() could not match relative type\", relativeString);\n            return;\n        }\n        type = type[0];\n\n        var offset = parseInt(relativeString.substr(type.length).trim()||0);\n        if (isNaN(offset)) {\n            Adapt.log.error(\"Adapt.parseRelativeString() could not parse relative offset\", relativeString);\n            return;\n        }\n\n        return {\n            type: type,\n            offset: offset\n        };\n\n    };\n\n    Adapt.remove = function() {\n        Adapt.trigger('preRemove');\n        Adapt.trigger('remove');\n        _.defer(function() {\n            Adapt.trigger('postRemove');\n        });\n    };\n\n    return Adapt;\n\n});\n\n","define('core/js/adaptCollection',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptCollection = Backbone.Collection.extend({\n        initialize : function(models, options){\n            this.url = options.url;\n\n            this.once('reset', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    reset:true,\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('adaptCollection:dataLoaded');\n        }\n\n    });\n\n    return AdaptCollection;\n\n});\n\n","define('core/js/startController',[\n    'core/js/adapt'\n], function(Adapt) {\n    \n    var StartController = Backbone.Controller.extend({\n\n        model: null,\n\n        initialize: function() {\n            this.model = new Backbone.Model(Adapt.course.get(\"_start\"));\n        },\n\n        setStartLocation: function() {\n            if (!this.isEnabled()) return;\n            window.history.replaceState('', '', this.getStartHash());\n        },\n\n        getStartHash: function(alwaysForce) {\n            var startId = this.getStartId();\n\n            var hasStartId = (startId)\n                ? true\n                : false;\n\n            var isRouteSpecified = (_.indexOf(window.location.href,\"#\") > -1);\n            var shouldForceStartId = alwaysForce || this.model.get(\"_force\");\n            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);\n\n            var startHash = \"#/\";\n            if (shouldNavigateToStartId) {\n                if (startId !== Adapt.course.get(\"_id\")) {\n                    startHash = \"#/id/\"+startId;\n                }\n            } else {\n                //go to specified route or course main menu\n                var hasLocationHash = (window.location.hash)\n                    ? true\n                    : false;\n\n                startHash = hasLocationHash ? window.location.hash : startHash;\n            }\n\n            return startHash;\n        },\n\n        isEnabled: function() {\n            if (!this.model || !this.model.get(\"_isEnabled\")) return false;\n            return true;\n        },\n\n        getStartId: function() {\n            var startId = this.model.get(\"_id\");\n            var startIds = this.model.get(\"_startIds\");\n            var $html = $(\"html\");\n            \n            var hasStartIdsConfiguration = (startIds && startIds.length > 0);\n            if (hasStartIdsConfiguration) {\n                for (var i = 0, l =  startIds.length; i < l; i++) {\n                    var item = startIds[i];\n                    var className =  item._className;\n                    var skipIfComplete = item._skipIfComplete;\n                    \n                    var model = Adapt.findById(item._id);\n                    \n                    if (!model) {\n                        console.log(\"startController: cannot find id\", item._id);\n                        continue;\n                    }\n                    \n                    if (skipIfComplete) {\n                        if (model.get(\"_isComplete\")) continue;\n                    }\n\n                    if (!className || $html.is(className) || $html.hasClass(className)) {\n                        startId = item._id;\n                        break;\n                    }\n                }\n            }\n\n            return startId;\n        }\n\n    });\n\n    Adapt.once(\"adapt:start\", function() {\n        var startController = new StartController();\n        startController.setStartLocation();\n    });\n\n    return StartController;\n\n});\n\n","define('core/js/enums/logLevelEnum',[],function() {\n\n    // Used to determine if log call should be printed based on log level\n    var LOG_LEVEL = ENUM([\n        \"DEBUG\",\n        \"INFO\",\n        \"WARN\",\n        \"ERROR\",\n        \"FATAL\"\n    ]);\n\n    return LOG_LEVEL;\n\n});\n","define('core/js/logging',[\n    'core/js/adapt',\n    'core/js/enums/logLevelEnum'\n], function(Adapt, LOG_LEVEL) {\n\n    var Logging = Backbone.Controller.extend({\n\n        _config: {\n            _isEnabled: true,\n            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level\n            _console: true // Log to console\n        },      \n        \n        initialize: function() {\n\n            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));\n\n        },\n        \n        onLoadCourseData: function() {\n\n            this.loadConfig();\n\n            this.debug('Logging config loaded');\n\n            this.trigger('log:ready');\n\n        },\n\n        loadConfig: function() {\n\n            if (Adapt.config.has('_logging')) {\n                this._config = Adapt.config.get('_logging');\n            }\n\n            this.checkQueryStringOverride();\n\n        },\n\n        checkQueryStringOverride: function() {\n\n            // Override default log level with level present in query string\n            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);\n            if (!matches || matches.length < 2) return;\n\n            var override = LOG_LEVEL(matches[1].toUpperCase());\n            if (!override) return;\n\n            this._config._level = override.asLowerCase;\n            this.debug('Loglevel override in query string:', this._config._level);\n            \n        },\n        \n        debug: function() {            \n            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));\n        },\n        \n        info: function() {\n            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));\n        },\n        \n        warn: function() {\n            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));\n        },\n        \n        error: function() {\n            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));\n        },\n        \n        fatal: function() {\n            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));\n        },\n        \n        _log: function(level, data) {\n\n            var isEnabled = (this._config._isEnabled);\n            if (!isEnabled) return;\n\n            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());\n\n            var isLogLevelAllowed = (level >= configLevel);\n            if (!isLogLevelAllowed) return;\n\n            this._logToConsole(level, data);\n\n            // Allow error reporting plugins to hook and report to logging systems\n            this.trigger('log', level, data);\n            this.trigger('log:' + level.asLowerCase, level, data);\n\n        },\n\n        _logToConsole: function(level, data) {\n\n            var shouldLogToConsole = (this._config._console);\n            if (!shouldLogToConsole) return;\n\n            var log = [level.asUpperCase + ':'];\n            data && log.push.apply(log, data);\n\n            // is there a matching console method we can use e.g. console.error()?\n            if(console[level.asLowerCase]) {\n                console[level.asLowerCase].apply(console, log);\n            } else {\n                console.log.apply(console, log);\n            }\n        }\n\n    });\n\n    Adapt.log = new Logging();\n});\n\n","define('core/js/models/buildModel',[\n    'core/js/adapt',\n    'core/js/logging'\n], function (Adapt) {\n\n    var BuildModel = Backbone.Model.extend({\n\n        defaults: {\n            jsonext: 'json'\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: _.bind(function() {\n                    this.isLoaded = true;\n                    Adapt.trigger('buildModel:dataLoaded');\n                }, this),\n                error: function() {\n                    console.log('Unable to load adapt/js/build.js');\n                    Adapt.trigger('buildModel:dataLoaded');\n                }\n            });\n        }\n\n    });\n\n    return BuildModel;\n\n});\n","define('core/js/models/adaptModel',[\n    'core/js/adapt',\n    'core/js/logging'\n], function (Adapt) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canShowFeedback: true,\n            _classes: \"\",\n            _canReset: false,\n            _isComplete: false,\n            _isInteractionComplete: false,\n            _requireCompletionOf: -1,\n            _isEnabled: true,\n            _isResetOnRevisit: false,\n            _isAvailable: true,\n            _isOptional: false,\n            _isReady: false,\n            _isVisible: true,\n            _isLocked: false,\n            _isHidden: false\n        },\n\n        trackable: [\n            '_id',\n            '_isComplete',\n            '_isInteractionComplete'\n        ],\n\n        initialize: function () {\n            // Wait until data is loaded before setting up model\n            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);\n\n        },\n\n        setupModel: function() {\n            if (this.get('_type') === 'page') {\n                this._children = 'articles';\n            }\n            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {\n                this._parent = 'contentObjects';\n            }\n            if (this._children) {\n                //if parent is optional, apply to children\n                if (this.get('_isOptional')) this.setOptional(true);\n\n                this.setupChildListeners();\n            }\n\n            this.init();\n\n            _.defer(_.bind(function() {\n                if (this._children) {\n                    this.checkCompletionStatus();\n\n                    this.checkInteractionCompletionStatus();\n\n                    this.checkLocking();\n                }\n\n                this.setupTrackables();\n\n            }, this));\n\n        },\n\n        setupTrackables: function() {\n\n            // Limit state trigger calls and make state change callbacks batched-asynchronous\n            var originalTrackableStateFunction = this.triggerTrackableState;\n            this.triggerTrackableState = _.compose(\n                _.bind(function() {\n\n                    // Flag that the function is awaiting trigger\n                    this.triggerTrackableState.isQueued = true;\n\n                }, this),\n                _.debounce(_.bind(function() {\n                    \n                    // Trigger original function\n                    originalTrackableStateFunction.apply(this);\n\n                    // Unset waiting flag\n                    this.triggerTrackableState.isQueued = false;\n\n                }, this), 17)\n            );\n\n            // Listen to model changes, trigger trackable state change when appropriate\n            this.listenTo(this, \"change\", function(model, value) {\n\n                // Skip if trigger queued or adapt hasn't started yet\n                if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {\n                    return;\n                }\n\n                // Check that property is trackable\n                var trackablePropertyNames = _.result(this, 'trackable', []);\n                var changedPropertyNames = _.keys(model.changed);\n                var isTrackable = _.find(changedPropertyNames, function(item, index) {\n                     return _.contains(trackablePropertyNames, item);\n                }.bind(this));\n\n                if (isTrackable) {\n                    // Trigger trackable state change\n                    this.triggerTrackableState();\n                }\n            });\n        },\n\n        setupChildListeners: function() {\n            var children = this.getChildren();\n            if (!children.length) {\n                return;\n            }\n\n            this.listenTo(children, {\n                \"change:_isReady\": this.checkReadyStatus,\n                \"change:_isComplete\": this.onIsComplete,\n                \"change:_isInteractionComplete\": this.checkInteractionCompletionStatus\n            });\n        },\n\n        init: function() {},\n\n        getTrackableState: function() {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n            var json = this.toJSON();\n\n            var args = trackable;\n            args.unshift(json);\n\n            return _.pick.apply(_, args);\n\n        },\n\n        setTrackableState: function(state) {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n\n            var args = trackable;\n            args.unshift(state);\n\n            state = _.pick.apply(_, args);\n\n            this.set(state);\n\n            return this;\n\n        },\n\n        triggerTrackableState: function() {\n            \n            Adapt.trigger(\"state:change\", this, this.getTrackableState());\n            \n        },\n\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true;\n\n            switch (type) {\n            case \"hard\": case true:\n                this.set({\n                    _isEnabled: true,\n                    _isComplete: false,\n                    _isInteractionComplete: false\n                });\n                break;\n            case \"soft\":\n                this.set({\n                    _isEnabled: true,\n                    _isInteractionComplete: false\n                });\n                break;\n            }\n        },\n\n        checkReadyStatus: function () {\n            // Filter children based upon whether they are available\n            // Check if any return _isReady:false\n            // If not - set this model to _isReady: true\n            var children = this.getAvailableChildModels();\n            if (_.find(children, function(child) { return child.get('_isReady') === false; })) {\n                return;\n            }\n\n            this.set({_isReady: true});\n        },\n\n        setCompletionStatus: function() {\n            if (this.get('_isVisible')) {\n                this.set('_isComplete', true);\n                this.set('_isInteractionComplete', true);\n            }\n        },\n\n        checkCompletionStatus: function () {\n            //defer to allow other change:_isComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isComplete\"));\n        },\n\n        checkInteractionCompletionStatus: function () {\n            //defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isInteractionComplete\"));\n        },\n\n        /**\n         * Function for checking whether the supplied completion attribute should be set to true or false. \n         * It iterates over our immediate children, checking the same completion attribute on any mandatory child\n         * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true; \n         * if not, we set it to false.\n         * @param {string} [completionAttribute] Either \"_isComplete\" or \"_isInteractionComplete\". Defaults to \"_isComplete\" if not supplied.\n         */        \n        checkCompletionStatusFor: function(completionAttribute) {\n            if (!completionAttribute) completionAttribute = \"_isComplete\";\n\n            var completed = false;\n            var children = this.getAvailableChildModels();\n            var requireCompletionOf = this.get(\"_requireCompletionOf\");\n\n            if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed\n                completed = (_.find(children, function(child) {\n                    return !child.get(completionAttribute) && !child.get('_isOptional');\n                }) === undefined);\n            } else {\n                completed = (_.filter(children, function(child) {\n                    return child.get(completionAttribute) && !child.get('_isOptional');\n                }).length >= requireCompletionOf);\n            }\n\n            this.set(completionAttribute, completed);\n\n            Adapt.checkedCompletion();\n        },\n\n        findAncestor: function (ancestors) {\n\n            var parent = this.getParent();\n\n            if (this._parent === ancestors) {\n                return parent;\n            }\n\n            var returnedAncestor = parent.getParent();\n\n            if (parent._parent !== ancestors) {\n                returnedAncestor = returnedAncestor.getParent();\n            }\n\n            // Returns a single model\n            return returnedAncestor;\n\n        },\n\n        findDescendantModels: function(descendants) {\n            var children = this.getChildren().models;\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return children;\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var returnedDescendants;\n\n            function searchChildren(models) {\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    allDescendants.push(model.getChildren().models);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = flattenedDescendants;\n\n                if (models.length === 0 || models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            return returnedDescendants;\n        },\n\n        \n        // Fetchs the sub structure of a model as a flattened array\n        // \n        // Such that the tree:\n        //  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        // \n        // will become the array (parent first = false):\n        //  [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]\n        // \n        // or (parent first = true):\n        //  [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]\n        // \n        // This is useful when sequential operations are performed on the menu/page/article/block/component hierarchy.        \n        getAllDescendantModels: function(isParentFirst) {\n\n            var descendants = [];\n\n            if (this.get(\"_type\") === \"component\") {\n                descendants.push(this);\n                return descendants;\n            }\n\n            var children = this.getChildren();\n\n            for (var i = 0, l = children.models.length; i < l; i++) {\n\n                var child = children.models[i];\n                if (child.get(\"_type\") === \"component\") {\n\n                    descendants.push(child);\n                    continue;\n\n                }\n\n                var subDescendants = child.getAllDescendantModels(isParentFirst);\n                if (isParentFirst === true) {\n                    descendants.push(child);\n                }\n\n                descendants = descendants.concat(subDescendants);\n                \n                if (isParentFirst !== true) {\n                    descendants.push(child);\n                }\n\n            }\n\n            return descendants;\n\n        },\n\n        findDescendants: function (descendants) {\n            Adapt.log.warn(\"DEPRECATED - Use findDescendantModels() as findDescendants() may be removed in the future\");\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return this.getChildren();\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var children = this.getChildren();\n            var returnedDescendants;\n\n            function searchChildren(children) {\n                var models = children.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    var childrensModels = model.getChildren().models;\n                    allDescendants.push(childrensModels);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = new Backbone.Collection(flattenedDescendants);\n\n                if (children.models.length === 0 || children.models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            // returns a collection of children\n            return returnedDescendants;\n        },\n\n        // Returns a relative model from the Adapt hierarchy\n        //    \n        // Such that in the tree:\n        //  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        // \n        //  findRelative(modelC1, \"@block +1\") = modelB2;\n        //  findRelative(modelC1, \"@component +4\") = modelC5;\n        //\n        // See Adapt.parseRelativeString() for a description of relativeStrings\n        findRelativeModel: function(relativeString, options) {\n            \n            var types = [ \"menu\", \"page\", \"article\", \"block\", \"component\" ];\n\n            options = options || {};\n\n            var modelId = this.get(\"_id\");\n            var modelType = this.get(\"_type\");\n\n            // return a model relative to the specified one if opinionated\n            var rootModel = Adapt.course;\n            if (options.limitParentId) {\n                rootModel = Adapt.findById(options.limitParentId);\n            }\n\n            var relativeDescriptor = Adapt.parseRelativeString(relativeString);\n\n            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));\n            var findSiblingType = (modelType === relativeDescriptor.type);\n\n            var searchBackwards = (relativeDescriptor.offset < 0);\n            var moveBy = Math.abs(relativeDescriptor.offset);\n            var movementCount = 0;\n\n            var findDescendantType = (!findSiblingType && !findAncestorType);\n\n            var pageDescendants;\n            if (searchBackwards) {\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\n                pageDescendants = rootModel.getAllDescendantModels(true);\n\n                // reverse so that we don't need a forward and a backward iterating loop\n                // reversed [c9,c8,b4,a4,c7,c6,b3,a3,p2,c4,c3,b2,a2,c2,c1,b1,a1,p1]\n                pageDescendants.reverse();\n\n                if (findDescendantType) {\n                    // move by one less as ordering allows\n                    moveBy-=1;\n                }\n\n            } else if (findDescendantType) {\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\n                pageDescendants = rootModel.getAllDescendantModels(true);\n            } else if (findSiblingType || findAncestorType) {\n                // children first [c1,c2,b1,a1,c3,c4,b2,a2,p1,c6,c7,b3,a3,c8,c9,b4,a4,p2]\n                pageDescendants = rootModel.getAllDescendantModels(false);\n            }\n\n            // filter if opinionated\n            if (typeof options.filter === \"function\") {\n                pageDescendants = _.filter(pageDescendants, options.filter);\n            }\n\n            // find current index in array\n            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {\n                if (pageDescendant.get(\"_id\") === modelId) {\n                    return true;\n                }\n                return false;\n            });\n\n            if (options.loop) {\n\n                // normalize offset position to allow for overflow looping\n                var typeCounts = {};\n                pageDescendants.forEach(function(model) {\n                    var type = model.get(\"_type\");\n                    typeCounts[type] = typeCounts[type] || 0;\n                    typeCounts[type]++;\n                });\n                moveBy = moveBy % typeCounts[relativeDescriptor.type];\n                \n                // double up entries to allow for overflow looping\n                pageDescendants = pageDescendants.concat(pageDescendants.slice(0));\n\n            }\n\n            for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {\n                var descendant = pageDescendants[i];\n                if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                    if (movementCount === moveBy) {\n                        return Adapt.findById(descendant.get(\"_id\"));\n                    }\n                    movementCount++;\n                }\n            }\n\n            return undefined;\n        },\n\n        getChildren: function () {\n            if (this.get(\"_children\")) return this.get(\"_children\");\n\n            var childrenCollection;\n\n            if (!this._children) {\n                childrenCollection = new Backbone.Collection();\n            } else {\n                var children = Adapt[this._children].where({_parentId: this.get(\"_id\")});\n                childrenCollection = new Backbone.Collection(children);\n            }\n\n            if (this.get('_type') == 'block' && childrenCollection.length == 2\n                && childrenCollection.models[0].get('_layout') !== 'left' && this.get('_sortComponents') !== false) {\n                // Components may have a 'left' or 'right' _layout,\n                // so ensure they appear in the correct order\n                // Re-order component models to correct it\n                childrenCollection.comparator = '_layout';\n                childrenCollection.sort();\n            }\n\n            this.set(\"_children\", childrenCollection);\n\n            // returns a collection of children\n            return childrenCollection;\n        },\n\n        getAvailableChildModels: function() {\n            return this.getChildren().where({\n                _isAvailable: true\n            });\n        },\n\n        getAvailableChildren: function() {\n            Adapt.log.warn(\"DEPRECATED - Use getAvailableChildModels() as getAvailableChildren() may be removed in the future\");\n\n            return new Backbone.Collection(this.getChildren().where({\n                _isAvailable: true\n            }));\n        },\n\n        getParent: function () {\n            if (this.get(\"_parent\")) return this.get(\"_parent\");\n            if (this._parent === \"course\") {\n                return Adapt.course;\n            }\n            var parent = Adapt.findById(this.get(\"_parentId\"));\n            this.set(\"_parent\", parent);\n\n            // returns a parent model\n            return parent;\n        },\n\n        getAncestorModels: function(shouldIncludeChild) {\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? parents : null;\n        },\n\n        getParents: function(shouldIncludeChild) {\n            Adapt.log.warn(\"DEPRECATED - Use getAncestorModels() as getParents() may be removed in the future\");\n\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? new Backbone.Collection(parents) : null;\n        },\n\n        getSiblings: function (passSiblingsAndIncludeSelf) {\n            var siblings;\n            if (!passSiblingsAndIncludeSelf) {\n                // returns a collection of siblings excluding self\n                if (this._hasSiblingsAndSelf === false) {\n                    return this.get(\"_siblings\");\n                }\n                siblings = _.reject(Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                }), _.bind(function (model) {\n                    return model.get('_id') == this.get('_id');\n                }, this));\n\n                this._hasSiblingsAndSelf = false;\n\n            } else {\n                // returns a collection of siblings including self\n                if (this._hasSiblingsAndSelf) {\n                    return this.get(\"_siblings\");\n                }\n\n                siblings = Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                });\n                this._hasSiblingsAndSelf = true;\n            }\n\n            var siblingsCollection = new Backbone.Collection(siblings);\n            this.set(\"_siblings\", siblingsCollection);\n            return siblingsCollection;\n        },\n\n        setOnChildren: function (key, value, options) {\n\n            var args = arguments;\n\n            this.set.apply(this, args);\n\n            if (!this._children) return;\n\n            var children = this.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var child = models[i];\n                child.setOnChildren.apply(child, args);\n            }\n\n        },\n\n        setOptional: function(value) {\n            this.set({_isOptional: value});\n        },\n\n        checkLocking: function() {\n            var lockType = this.get(\"_lockType\");\n\n            if (!lockType) return;\n\n            switch (lockType) {\n                case \"sequential\":\n                    this.setSequentialLocking();\n                    break;\n                case \"unlockFirst\":\n                    this.setUnlockFirstLocking();\n                    break;\n                case \"lockLast\":\n                    this.setLockLastLocking();\n                    break;\n                case \"custom\":\n                    this.setCustomLocking();\n                    break;\n                default:\n                    console.warn(\"AdaptModel.checkLocking: unknown _lockType \\\"\" +\n                        lockType + \"\\\" found on \" + this.get(\"_id\"));\n            }\n        },\n\n        setSequentialLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !children[i - 1].get(\"_isComplete\"));\n            }\n        },\n\n        setUnlockFirstLocking: function() {\n            var children = this.getAvailableChildModels();\n            var isFirstChildComplete = children[0].get(\"_isComplete\");\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !isFirstChildComplete);\n            }\n        },\n\n        setLockLastLocking: function() {\n            var children = this.getAvailableChildModels();\n            var lastIndex = children.length - 1;\n\n            for (var i = lastIndex - 1; i >= 0; i--) {\n                if (!children[i].get(\"_isComplete\")) {\n                    return children[lastIndex].set(\"_isLocked\", true);\n                }\n            }\n\n            children[lastIndex].set(\"_isLocked\", false);\n        },\n\n        setCustomLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 0, j = children.length; i < j; i++) {\n                var child = children[i];\n\n                child.set(\"_isLocked\", this.shouldLock(child));\n            }\n        },\n\n        shouldLock: function(child) {\n            var lockedBy = child.get(\"_lockedBy\");\n\n            if (!lockedBy) return false;\n\n            for (var i = lockedBy.length - 1; i >= 0; i--) {\n                var id = lockedBy[i];\n\n                try {\n                    var model = Adapt.findById(id);\n\n                    if (!model.get(\"_isAvailable\")) continue;\n                    if (!model.get(\"_isComplete\")) return true;\n                }\n                catch (e) {\n                    console.warn(\"AdaptModel.shouldLock: unknown _lockedBy ID \\\"\" + id +\n                        \"\\\" found on \" + child.get(\"_id\"));\n                }\n            }\n\n            return false;\n        },\n\n        onIsComplete: function() {\n            this.checkCompletionStatus();\n\n            this.checkLocking();\n        }\n\n    });\n\n    return AdaptModel;\n\n});\n\n","define('core/js/models/articleModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ArticleModel = AdaptModel.extend({\n        _parent:'contentObjects',\n    \t_siblings:'articles',\n        _children: 'blocks'\n    });\n\n    return ArticleModel;\n\n});\n\n","define('core/js/models/blockModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\t\n    var BlockModel = AdaptModel.extend({\n        _parent:'articles',\n    \t_siblings:'blocks',\n        _children: 'components',\n        \n        defaults: function() {\n            return _.extend({\n                _sortComponents: true\n            }, AdaptModel.prototype.defaults);\n        }\n    });\n\n    return BlockModel;\n\n});\n\n","define('core/js/models/configModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var ConfigModel = Backbone.Model.extend({\n\n        defaults: {\n            screenSize: {\n                small: 520,\n                medium: 760,\n                large: 1024\n            },\n            _forceRouteLocking: false,\n            _canLoadData: true,\n            _disableAnimation: false\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: function() {\n                    Adapt.trigger('offlineStorage:prepare');\n\n                    Adapt.wait.queue(function() {\n\n                        Adapt.trigger('configModel:dataLoaded');\n\n                        if (this.get('_canLoadData')) {\n                            Adapt.trigger('configModel:loadCourseData');\n                        }\n\n                        if (this.get('_defaultDirection') === 'rtl'){\n                            // We're going to use rtl style\n                            $('html').addClass('dir-rtl');\n                        }\n\n                        // Check if animations should be disabled\n                        var disableAnimationArray = this.get('_disableAnimationFor');\n                        if (disableAnimationArray && disableAnimationArray.length > 0) {\n                            for (var i = 0; i < disableAnimationArray.length; i++) {\n                                if ($(\"html\").is(disableAnimationArray[i])) {\n                                    this.set('_disableAnimation', true);\n                                    console.log('Animation disabled.');\n                                }\n                            }\n                        }\n                    }.bind(this));\n                }.bind(this),\n                error: function() {\n                    console.log('Unable to load course/config.json');\n                }\n            });\n        },\n\n        loadData: function() {\n\n        }\n\n    });\n\n   return ConfigModel;\n\n});\n\n","define('core/js/models/contentObjectModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ContentObjectModel = AdaptModel.extend({\n    \t_parent:'course',\n    \t_siblings:'contentObjects',\n        _children: 'contentObjects'\n    });\n\n    return ContentObjectModel;\n});\n\n","define('core/js/models/componentModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ComponentModel = AdaptModel.extend({\n        _parent:'blocks',\n        _siblings:'components',\n\n        trackable: AdaptModel.resultExtend(\"trackable\", [\n            '_userAnswer'\n        ])\n\n    });\n\n    return ComponentModel;\n\n});\n\n","define('core/js/models/courseModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var CourseModel = AdaptModel.extend({\n\n        initialize: function(attrs, options) {\n            AdaptModel.prototype.initialize.apply(this, arguments);\n            Adapt.trigger('courseModel:dataLoading');\n\n            this.url = options.url;\n\n            this.on('sync', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('courseModel:dataLoaded');\n        },\n\n        _children: \"contentObjects\"\n\n    });\n\n    return CourseModel;\n\n});\n\n","define('core/js/enums/buttonStateEnum',[],function() {\n\n    var BUTTON_STATE = ENUM([\n        'SUBMIT',\n        'CORRECT',\n        'INCORRECT',\n        'SHOW_CORRECT_ANSWER',\n        'HIDE_CORRECT_ANSWER',\n        'SHOW_FEEDBACK',\n        'RESET'\n    ]);\n\n    return BUTTON_STATE;\n\n});\n","define('core/js/models/questionModel',[\n    'core/js/adapt',\n    'core/js/models/componentModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentModel, BUTTON_STATE) {\n\n    var QuestionModel = ComponentModel.extend({\n\n        //////\n        // Setup question types\n        ////\n\n        // Used to set model defaults\n        defaults: function() {\n            // Extend from the ComponentModel defaults\n            return ComponentModel.resultExtend(\"defaults\", {\n                _isQuestionType: true,\n                _shouldDisplayAttempts: false,\n                _canShowModelAnswer: true,\n                _canShowFeedback: true,\n                _canShowMarking: true,\n                _isSubmitted: false,\n                _questionWeight: Adapt.config.get(\"_questionWeight\"),\n            });\n        },\n\n        // Extend from the ComponentModel trackable\n        trackable: ComponentModel.resultExtend(\"trackable\", [\n            '_isSubmitted',\n            '_score',\n            '_isCorrect',\n            '_attemptsLeft'\n        ]),\n\n        init: function() {\n            this.setupDefaultSettings();\n            this.listenToOnce(Adapt, \"adapt:initialize\", this.onAdaptInitialize);\n        },\n\n        // Calls default methods to setup on questions\n        setupDefaultSettings: function() {\n            // Not sure this is needed anymore, keeping to maintain API\n            this.setupWeightSettings();\n            this.setupButtonSettings();\n        },\n\n        // Used to setup either global or local button text\n        setupButtonSettings: function() {\n            var globalButtons = Adapt.course.get(\"_buttons\");\n\n            // Check if  '_buttons' attribute exists and if not use the globally defined buttons.\n            if (!this.has(\"_buttons\")) {\n                this.set(\"_buttons\", globalButtons);\n            } else {\n                // Check all the components buttons.\n                // If they are empty use the global defaults.\n                var componentButtons = this.get(\"_buttons\");\n\n                for (var key in componentButtons) {\n                    if (typeof componentButtons[key] === 'object') {\n                        // Button text.\n                        if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {\n                            componentButtons[key].buttonText = globalButtons[key].buttonText;\n                        }\n\n                        // ARIA labels.\n                        if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {\n                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;\n                        }\n                    }\n\n                    if (!componentButtons[key] && globalButtons[key]) {\n                        componentButtons[key] = globalButtons[key];\n                    }\n                }\n            }\n        },\n\n        // Used to setup either global or local question weight/score\n        setupWeightSettings: function() {\n            // Not needed as handled by model defaults, keeping to maintain API\n        },\n\n        //////\n        // Selection restoration process\n        ////\n\n\n        // Used to add post-load changes to the model\n        onAdaptInitialize: function() {\n            this.restoreUserAnswers();\n        },\n\n        // Used to restore the user answers \n        restoreUserAnswers: function() {},\n\n        \n        //////\n        // Submit process\n        ////\n\n        // Use to check if the user is allowed to submit the question\n        // Maybe the user has to select an item?\n        canSubmit: function() {},\n\n        // Used to update the amount of attempts the user has left\n        updateAttempts: function() {\n            if (!this.get('_attemptsLeft')) {\n                this.set(\"_attemptsLeft\", this.get('_attempts'));\n            }\n            this.set(\"_attemptsLeft\", this.get('_attemptsLeft') - 1);\n        },\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        setQuestionAsSubmitted: function() {\n            this.set({\n                _isEnabled: false,\n                _isSubmitted: true\n            });\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {},\n\n        // Sets _isCorrect:true/false based upon isCorrect method below\n        markQuestion: function() {\n\n            if (this.isCorrect()) {\n                this.set('_isCorrect', true);\n            } else {\n                this.set('_isCorrect', false);\n            }\n\n        },\n\n         // Should return a boolean based upon whether to question is correct or not\n        isCorrect: function() {},\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);\n\n            if (isComplete) {\n                this.setCompletionStatus();\n            }\n\n            return isComplete;\n\n        },\n\n        // Updates buttons based upon question state by setting\n        // _buttonState on the model which buttonsView listens to\n        updateButtons: function() {\n\n            var isInteractionComplete = this.get('_isInteractionComplete');\n            var isCorrect = this.get('_isCorrect');\n            var isEnabled = this.get('_isEnabled');\n            var buttonState = this.get('_buttonState');\n            var canShowModelAnswer = this.get('_canShowModelAnswer');\n\n            if (isInteractionComplete) {\n\n                if (isCorrect || !canShowModelAnswer) {\n                    // Use correct instead of complete to signify button state\n                    this.set('_buttonState', BUTTON_STATE.CORRECT);\n\n                } else {\n\n                    switch (buttonState) {\n                        case BUTTON_STATE.SUBMIT:\n                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);\n                            break;\n                        default:\n                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    }\n\n                }\n\n            } else {\n\n                if (isEnabled) {\n                    this.set('_buttonState', BUTTON_STATE.SUBMIT);\n                } else {\n                    this.set('_buttonState', BUTTON_STATE.RESET);\n                }\n            }\n\n        },\n\n        // Used to setup the correct, incorrect and partly correct feedback\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        // Used by the question to determine if the question is incorrect or partly correct\n        // Should return a boolean\n        isPartlyCorrect: function() {},\n\n        setupCorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n\n            this.set({\n                feedbackTitle: this.getFeedbackTitle(feedback),\n                feedbackMessage: feedback.correct || \"\"\n            });\n\n        },\n\n        setupPartlyCorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n            \n            if (!feedback) return;\n\n            if (feedback._partlyCorrect) {\n                if (this.get('_attemptsLeft') === 0 || !feedback._partlyCorrect.notFinal) {\n                    if (feedback._partlyCorrect.final) {\n                        this.set({\n                            feedbackTitle: this.getFeedbackTitle(feedback),\n                            feedbackMessage: feedback._partlyCorrect.final\n                        });\n                    } else {\n                        this.setupIncorrectFeedback();\n                    }\n                } else {\n                    this.set({\n                        feedbackTitle: this.getFeedbackTitle(feedback),\n                        feedbackMessage: feedback._partlyCorrect.notFinal ? feedback._partlyCorrect.notFinal : \"\"\n                    });\n                }\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        setupIncorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n\n            if (this.get('_attemptsLeft') === 0 || feedback && !feedback._incorrect.notFinal) {\n                this.set({\n                    feedbackTitle: this.getFeedbackTitle(feedback),\n                    feedbackMessage: feedback ? feedback._incorrect.final : \"\"\n                });\n            } else {\n                this.set({\n                    feedbackTitle: this.getFeedbackTitle(feedback),\n                    feedbackMessage: feedback ? feedback._incorrect.notFinal : \"\"\n                });\n            }\n\n        },\n        \n        getFeedbackTitle: function(feedback) {\n            return feedback.title || this.get('displayTitle') ||  this.get('title') || \"\";\n        },\n\n        // Reset the model to let the user have another go (not the same as attempts)\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true; //hard reset by default, can be \"soft\", \"hard\"/true\n\n            ComponentModel.prototype.reset.call(this, type, force);\n\n            var attempts = this.get('_attempts');\n            this.set({\n                _attemptsLeft: attempts,\n                _isCorrect: undefined,\n                _isSubmitted: false,\n                _buttonState: BUTTON_STATE.SUBMIT\n            });\n        },\n\n        // Reset question for subsequent attempts\n        setQuestionAsReset: function() {\n            this.set({\n                _isEnabled: true,\n                _isSubmitted: false\n            });\n        },\n\n        // Used by the question view to reset the stored user answer\n        resetUserAnswer: function() {},\n        \n        refresh: function() {\n            this.trigger('question:refresh');\n        },\n\n        getButtonState: function() {\n            if (this.get('_isCorrect')) {\n                return BUTTON_STATE.CORRECT;\n            }\n\n            if (this.get('_attemptsLeft') === 0) {\n                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;\n            }\n\n            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;\n        },\n\n        // Returns an object specific to the question type, e.g. if the question\n        // is a 'choice' this should contain an object with:\n        // - correctResponsesPattern[]\n        // - choices[]\n        getInteractionObject: function() {\n            return {};\n        },\n\n        // Returns a string detailing how the user answered the question.\n        getResponse: function() {},\n\n        // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\n        getResponseType: function() {}\n\n    });\n\n    return QuestionModel;\n\n});\n\n","define('core/js/views/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        initialize: function() {\n            this.render();\n        },\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOff || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOff);\n                var onLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOn || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOn);\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.attr('aria-label', Adapt.course.get(\"title\") + \". \"\n                    + Adapt.course.get('_globals')._accessibility._ariaLabels.accessibilityToggleButton + \". \"\n                    + $.a11y_normalize(toggleText));\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            Adapt.trigger('accessibility:toggle');\n\n            this.render();\n\n            Backbone.history.navigate(window.location.hash || \"#/\", {trigger: true});\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n\n","define('core/js/views/navigationView',[\n    'core/js/adapt',\n    'core/js/views/accessibilityView'\n], function(Adapt, AccessibilityView) {\n\n    var NavigationView = Backbone.View.extend({\n\n        className: \"navigation\",\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                'courseModel:dataLoading': this.remove,\n                'accessibility:toggle': this.onA11yToggle\n            });\n            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);\n            this.template = \"navigation\";\n            this.preRender();\n        },\n\n        events: {\n            'click [data-event]':'triggerEvent'\n        },\n\n        preRender: function() {\n            Adapt.trigger('navigationView:preRender', this);\n            this.render();\n        },\n\n        render: function() {\n            var template = Handlebars.templates[this.template];\n            this.$el.html(template(\n                {\n                    _globals: Adapt.course.get(\"_globals\"),\n                    _accessibility: Adapt.config.get(\"_accessibility\")\n                }\n            )).insertBefore('#wrapper');\n\n            _.defer(_.bind(function() {\n                Adapt.trigger('navigationView:postRender', this);\n            }, this));\n\n            this.setupA11yButton();\n\n            if (Adapt.accessibility.isActive()) {\n                this.setupUsageInstructions();\n            }\n\n            return this;\n        },\n\n        triggerEvent: function(event) {\n            event.preventDefault();\n            var currentEvent = $(event.currentTarget).attr('data-event');\n            Adapt.trigger('navigation:' + currentEvent);\n        },\n\n        hideNavigationButton: function(model) {\n            if (model.get('_type') === \"course\") {\n                $('.navigation-back-button, .navigation-home-button').addClass('display-none');\n            } else {\n                this.showNavigationButton();\n            }\n        },\n\n        showNavigationButton: function() {\n            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');\n        },\n\n        setupA11yButton: function() {\n            new AccessibilityView();\n        },\n\n        setupUsageInstructions: function() {\n            var config = Adapt.course.get(\"_globals\")._accessibility;\n\n            if (!config || !config._accessibilityInstructions) {\n                this.$('#accessibility-instructions').remove();\n                return;\n            }\n\n            var instructionsList = config._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           this.$('#accessibility-instructions').html( usageInstructions );\n        },\n\n        onA11yToggle:function() {\n            // listen once because if a11y active on launch instructions will already be setup\n            \n            if (Adapt.accessibility.isActive()) {\n                this.setupUsageInstructions();\n            }\n        }\n\n    });\n\n    return NavigationView;\n\n});\n\n","define('core/js/accessibility',[\n    'core/js/adapt',\n    'a11y'\n], function(Adapt) {\n\n    var defaultAriaLevels = {\n        \"_menu\": 1,\n        \"_menuItem\": 2,\n        \"_page\": 1,\n        \"_article\": 2,\n        \"_block\": 3,\n        \"_component\": 4,\n        \"_componentItem\": 5\n    };\n\n    var Accessibility = Backbone.Controller.extend({\n\n        $html: $('html'),\n\n        _hasUsageInstructionRead: false,\n        _isLoaded: false,\n        _hasCourseLoaded: false,\n\n        reset: function() {\n            _.extend(this, {\n                _hasUsageInstructionRead: false\n            });\n        },\n\n        initialize: function() {\n            //RUN ONCE\n            if (this._isLoaded) return;\n\n            this.removeLegacyElements();\n\n            //TRIGGER SETUP ON DATA LOADED AND TOGGLE BUTTON\n            Adapt.once('app:dataLoaded', function() {\n                //check if accessibility mode should be restored\n                this._hasCourseLoaded = true;\n                Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get(\"a11y\") || false;\n                this.setupAccessibility();\n\n            }, this);\n\n            Adapt.on('accessibility:toggle', this.setupAccessibility, this);\n\n            //SETUP RENDERING HELPERS\n            Adapt.once('app:dataLoaded', this.setupHelpers, this);\n\n            //SETUP NO SELECT PARAMETERS ON DEVICE CHANGE\n            Adapt.on(\"device:changed\", this.setupNoSelect);\n\n            //Configure the accessibility library\n            this.listenToOnce(Adapt, \"app:dataReady\", this.configureA11yLibrary);\n\n            //CAPTURE ROUTING/NEW DOCUMENT LOADING START AND END\n            this.listenTo(Adapt, {\n                'router:location': this.onNavigationStart,\n                'pageView:ready menuView:ready router:plugin': this.onNavigationEnd\n            });\n        },\n\n        removeLegacyElements: function() {\n            var $legacyElements = $(\"body\").children(\"#accessibility-toggle, #accessibility-instructions\");\n\n            if (!$legacyElements.length) return;\n\n            Adapt.log.warn(\"DEPRECATED - #accessibility-toggle and #accessibility-instructions have been moved to the navigation bar. Please remove them from all of your .html files.\");\n            $legacyElements.remove();\n        },\n\n        setupAccessibility: function() {\n            //CALLED ON BUTTON CLICK AND ON DATA LOAD\n            if (!this.isEnabled()) return;\n\n            //save accessibility state\n            Adapt.offlineStorage.set(\"a11y\", Adapt.config.get(\"_accessibility\")._isActive);\n\n            this.reset();\n\n            this.configureA11yLibrary();\n\n            // Check if accessibility is active\n            if (this.isActive()) {\n                this.setupDocument();\n                this.setupPopupListeners();\n                this.setupLogging();\n\n            } else {\n\n                this.revertDocument();\n                this.revertPopupListeners();\n                this.removeUsageInstructionListener();\n                this.revertLogging();\n            }\n        },\n\n        setupHelpers: function() {\n\n            //MAKE $.a11y_text and $.a11y_normalize IN GLOBAL HANDLEBARS HELPERS a11y_text and a11y_normalize\n            var config = Adapt.config.has('_accessibility')\n                ? Adapt.config.get(\"_accessibility\")\n                : false;\n\n            var helpers = {\n\n                a11y_text: function(text) {\n                    //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                    if (config && config._isTextProcessorEnabled === false) {\n                        return text;\n                    } else {\n                        return $.a11y_text(text);\n                    }\n                },\n\n                a11y_normalize: function(text) {\n                    return $.a11y_normalize(text);\n                },\n\n                a11y_remove_breaks: function(text) {\n                    return $.a11y_remove_breaks(text);\n                },\n\n                a11y_aria_label: function(text) {\n                    return new Handlebars.SafeString('<div class=\"aria-label prevent-default'+getIgnoreClass()+'\" '+getTabIndex()+' role=\"region\">'+text+'</div>');\n                },\n\n                a11y_aria_label_relative: function(text) {\n                    return new Handlebars.SafeString('<div class=\"aria-label relative prevent-default'+getIgnoreClass()+'\" '+getTabIndex()+' role=\"region\">'+text+'</div>');\n                },\n\n                a11y_wrap_focus: function(text) {\n                    return new Handlebars.SafeString('<a class=\"a11y-focusguard a11y-ignore a11y-ignore-focus\" '+getTabIndex()+' role=\"button\">&nbsp;</a>');\n                },\n\n                a11y_attrs_heading: function(levelOrType) {\n                    // get the global configuration from config.json\n                    var cfg = Adapt.config.get('_accessibility');\n                    // default level to use if nothing overrides it\n                    var level = 1;\n\n                    // first check to see if the Handlebars context has an override\n                    if (this._ariaLevel) {\n                        levelOrType = this._ariaLevel;\n                    }\n\n                    if (isNaN(levelOrType) === false) {\n                        // if a number is passed just use this\n                        level = levelOrType;\n                    }\n                    else if (_.isString(levelOrType)) {\n                        // if a string is passed check if it is defined in global configuration\n                        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;\n                        if (cfg._ariaLevels && cfg._ariaLevels[\"_\"+levelOrType] !== undefined) {\n                            level = cfg._ariaLevels[\"_\"+levelOrType];\n                        }\n                    }\n\n                    return new Handlebars.SafeString(' role=\"heading\" aria-level=\"'+level+'\" '+getTabIndex()+' ');\n                },\n\n                a11y_attrs_tabbable: function() {\n                    return new Handlebars.SafeString(' role=\"region\" '+getTabIndex()+' ');\n                }\n\n            };\n\n            for (var name in helpers) {\n                if (helpers.hasOwnProperty(name)) {\n                     Handlebars.registerHelper(name, helpers[name]);\n                }\n            }\n\n            var getTabIndex = function() {\n                return this.isActive() ? 'tabindex=\"0\"' : 'tabindex=\"-1\"';\n            }.bind(this);\n\n            var getIgnoreClass = function() {\n                return $.a11y.options.isTabbableTextEnabled ? '' : ' a11y-ignore';\n            }.bind(this);\n\n        },\n\n        setupNoSelect: function() {\n            if (!Adapt.config.get('_accessibility') || !Adapt.config.get('_accessibility')._disableTextSelectOnClasses) return;\n\n            var classes = Adapt.config.get('_accessibility')._disableTextSelectOnClasses.split(\" \");\n\n            var isMatch = false;\n            for (var i = 0, item; item = classes[i++];) {\n                if ($('html').is(item)) {\n                    isMatch = true;\n                    break;\n                }\n            }\n\n            if (isMatch) {\n                $('html').addClass(\"no-select\");\n            } else  {\n                $('html').removeClass(\"no-select\");\n            }\n\n        },\n\n        configureA11yLibrary: function() {\n\n            var topOffset = $('.navigation').height();\n            var bottomoffset = 0;\n            $.a11y.options.focusOffsetTop = topOffset;\n            $.a11y.options.focusOffsetBottom = bottomoffset;\n            $.a11y.options.OS = Adapt.device.OS.toLowerCase();\n            $.a11y.options.isTouchDevice = Adapt.device.touch;\n\n            if (this.isActive()) {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            this.setupNoSelect();\n\n            $.a11y.ready();\n        },\n\n        onNavigationStart: function() {\n            this._isLoaded = false;\n            //STOP DOCUMENT READING, MOVE FOCUS TO APPROPRIATE LOCATION\n            $(\"#a11y-focuser\").a11y_focus(true);\n            _.defer(function() {\n                $.a11y_on(false, '.page');\n                $.a11y_on(false, '.menu');\n            });\n        },\n\n        onNavigationEnd: function(view) {\n            //prevent sub-menu items provoking behaviour\n            if (view && view.model) {\n                if (view.model.get(\"_id\") != Adapt.location._currentId) return;\n            }\n\n            //always use detached aria labels for divs and spans\n            _.defer(function() {\n                $('body').a11y_aria_label(true);\n            });\n\n            this._isLoaded = true;\n\n            $.a11y_on(false, '.page');\n            $.a11y_on(false, '.menu');\n\n            this.configureA11yLibrary();\n            $.a11y_update();\n            this.setNavigationBar();\n\n            $('#accessibility-toggle').focus();\n\n            //MAKE FOCUS RIGHT\n            _.delay(_.bind(function() {\n                this.focusInitial();\n            }, this), 500);\n\n        },\n\n        setNavigationBar: function() {\n            var $navArias = $(\".navigation\").find(\".aria-label\").not('#accessibility-instructions');\n\n            if (this.isActive()) {\n                $navArias.attr(\"tabindex\", 0).removeAttr(\"aria-hidden\").removeClass(\"a11y-ignore\");\n            } else {\n                $navArias.attr(\"tabindex\", -1).attr(\"aria-hidden\", \"true\");\n            }\n        },\n\n        isActive: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled\n                && Adapt.config.get('_accessibility')._isActive;\n        },\n\n        isEnabled: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n        },\n\n        setupDocument: function() {\n            this.$html.addClass('accessibility');\n\n            if (Adapt.config.get('_accessibility')._isTextProcessorEnabled) {\n                this.$html.addClass('text-to-speech');\n            }\n\n            $('.skip-nav-link').removeClass('a11y-ignore a11y-ignore-focus');\n\n            $.a11y(true)\n            $.a11y_on(true, \"#accessibility-instructions\");\n        },\n\n        setupPopupListeners: function() {\n            this.listenTo(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        setupLogging: function() {\n            if (!Adapt.config.get(\"_accessibility\") || !Adapt.config.get(\"_accessibility\")._logReading) return;\n\n            $(document).on(\"reading\", this.onRead);\n        },\n\n        revertDocument: function() {\n            this.$html.removeClass('accessibility text-to-speech');\n            $('.skip-nav-link').addClass('a11y-ignore a11y-ignore-focus');\n            $.a11y(false);\n            $.a11y_on(false, \"#accessibility-instructions\");\n            $.a11y_on(true, \"#accessibility-toggle\");\n        },\n\n        revertPopupListeners: function() {\n            this.stopListening(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        removeUsageInstructionListener:function() {\n            $('#accessibility-instructions').off(\"blur\", this.onFocusInstructions);\n        },\n\n        revertLogging: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._logReading)) return;\n\n            $($.a11y).off(\"reading\", this.onRead);\n        },\n\n\n        focusInitial: function() {\n            if (!this.isActive()) return;\n\n            var debouncedInitial = _.debounce(_.bind(function() {\n                //ENABLED DOCUMENT READING\n\n                if (!this._hasUsageInstructionRead) {\n\n                    this._hasUsageInstructionRead = true;\n\n                    $.a11y_on(true, '.page');\n                    $.a11y_on(true, '.menu');\n\n                    $('#accessibility-instructions').one(\"blur\", this.onFocusInstructions);\n\n                    _.delay(function(){\n                        $('#accessibility-instructions').focusNoScroll();\n                    }, 250);\n\n                } else {\n\n                    if (Adapt.location._currentId && $.a11y.options.OS!=\"mac\") {\n                        //required to stop JAWS from auto reading content in IE\n                        var currentModel = Adapt.findById(Adapt.location._currentId);\n                        var alertText = \" \";\n\n                        switch (currentModel.get(\"_type\")) {\n                            case \"page\":\n                                if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded;\n                                }\n                                break;\n\n                            case \"menu\":\n                            /* falls through */\n                            default:\n                                if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded;\n                                }\n                                break;\n                        }\n\n                        $.a11y_alert(alertText);\n                    }\n\n                     _.delay(_.bind(function() {\n                        var windowScrollTop = $(window).scrollTop();\n                        var documentScrollTop = $(document).scrollTop();\n\n                        $.a11y_on(true, '.page');\n                        $.a11y_on(true, '.menu');\n\n                        //prevent auto scrolling to top when scroll has been initiated\n                        if (windowScrollTop > 0 || documentScrollTop > 0) return;\n\n                        _.delay(function(){\n                            $.a11y_focus();\n                        }, 500);\n\n                    }, this), 500);\n\n                }\n\n            }, this), 100);\n            debouncedInitial();\n\n        },\n\n        onRead: function(event, text) {\n            //OUTPUT READ TEXT TO CONSOLE\n            console.log(\"READING: \" + text);\n        },\n\n        onPop: function() {\n            //MAKE SURE POPUP IS CONFIGURED CORRECTLY WITH ARIA LABELS, TABINDEXES ETC\n            if (this.isActive()) {\n                $.a11y_update();\n            }\n        },\n\n        onFocusInstructions: function(event) {\n            //HIDE INSTRUCTIONS FROM TAB WRAP AROUND AFTER LEAVING INSTRUCTIONS\n            if (!Adapt.accessibility._isLoaded) return;\n            $('#accessibility-instructions')\n                .addClass(\"a11y-ignore-focus\")\n                .off(\"blur\", Adapt.accessibility.onFocusInstructions);\n        }\n\n    });\n\n    Adapt.accessibility = new Accessibility();\n\n    return Adapt.accessibility;\n\n});\n\n","define('core/js/offlineStorage',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    //Basic API for setting and getting name+value pairs\n    //Allows registration of a single handler.\n\n    var OfflineStorage = Backbone.Controller.extend({\n\n        /**\n         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)\n         * this can still be accessed OK\n         */\n        ready: true,\n        _handler: undefined,\n\n        /**\n         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know\n         * it's ready before we can safely use offlineStorage\n         */\n        initialize: function(handler) {\n            if (!handler) {\n                return;\n            }\n\n            this.ready = false;\n            this._handler = handler;\n        },\n\n        /**\n         * Flag to indicate if an offlineStorage handler has been defined.\n         * @returns {boolean} true if an offlineStorage handler has been defined, false otherwise\n         */\n        hasHandler: function() {\n            return this._handler !== undefined;\n        },\n\n        set: function(name, value) {\n            if (this._handler && this._handler.set) {\n                return this._handler.set.apply(this._handler, arguments);\n            }\n            // if no handler has been defined, just store the data locally\n            this[name] = value;\n        },\n\n        get: function(name) {\n            if (this._handler && this._handler.get) {\n                return this._handler.get.apply(this._handler, arguments);\n            }\n            // if no handler has been defined, check local data store\n            return this[name];\n        },\n\n        /**\n         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used\n         */\n        setReadyStatus: function() {\n            this.ready = true;\n            Adapt.trigger(\"offlineStorage:ready\");\n        }\n\n    });\n\n    Adapt.offlineStorage = new OfflineStorage();\n\n    return Adapt.offlineStorage;\n\n});\n\n","define('core/js/enums/completionStateEnum',[],function() {\n  \n      var COMPLETION_STATE = ENUM([\n          'INCOMPLETE',\n          'COMPLETED',\n          'PASSED',\n          'FAILED'\n      ]);\n  \n      return COMPLETION_STATE;\n  \n  });\n","define('core/js/tracking',[\n    'core/js/adapt',\n    'core/js/enums/completionStateEnum'\n], function(Adapt, COMPLETION_STATE) {\n\n    var Tracking = Backbone.Controller.extend({\n\n        _config: {\n            _requireContentCompleted: true,\n            _requireAssessmentCompleted: false\n        },\n\n        _assessmentState: null,\n\n        initialize: function() {\n            Adapt.once('configModel:loadCourseData', this.loadConfig.bind(this));\n            Adapt.on('app:dataReady', this.setupEventListeners.bind(this));\n        },\n\n        setupEventListeners: function() {\n            // Check if completion requires passing an assessment. \n            if (this._config._requireAssessmentCompleted) {\n                this.listenTo(Adapt, 'assessment:complete', this.onAssessmentComplete);\n            }\n\n            // Check if completion requires completing all content.\n            if (this._config._requireContentCompleted) {\n                this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);\n            }\n        },\n\n        /**\n         * Store the assessment state.\n         * @param {object} assessmentState - The object returned by Adapt.assessment.getState()\n         */\n        onAssessmentComplete: function(assessmentState) {\n            this._assessmentState = assessmentState;\n\n            this.checkCompletion();\n        },\n\n        /**\n         * Evaluate the course and assessment completion.\n         */\n        checkCompletion: function() {\n            var completionData = this.getCompletionData();\n\n            if (completionData.status === COMPLETION_STATE.INCOMPLETE) {\n                return;\n            }\n\n            Adapt.trigger('tracking:complete', completionData);\n            Adapt.log.debug('tracking:complete', completionData);\n        },\n\n        /**\n         * The return value of this function should be passed to the trigger of 'tracking:complete'.\n         * @returns An object representing the user's course completion.\n         */\n        getCompletionData: function() {\n            var completionData = {\n                status: COMPLETION_STATE.INCOMPLETE,\n                assessment: null\n            };\n\n            // Course complete is required.\n            if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {\n                // INCOMPLETE: course not complete.\n                return completionData;\n            }\n\n            // Assessment completed required.\n            if (this._config._requireAssessmentCompleted) {\n                if (!this._assessmentState) {\n                    // INCOMPLETE: assessment is not complete.\n                    return completionData;\n                }\n\n                // PASSED/FAILED: assessment completed.\n                completionData.status = this._assessmentState.isPass ? COMPLETION_STATE.PASSED : COMPLETION_STATE.FAILED;\n                completionData.assessment = this._assessmentState;\n\n                return completionData;\n            }\n\n            // COMPLETED: criteria met, no assessment requirements.\n            completionData.status = COMPLETION_STATE.COMPLETED;\n\n            return completionData;\n        },\n\n        /**\n         * Set the _config object to the values retrieved from config.json.\n         */\n        loadConfig: function() {\n            if (Adapt.config.has('_completionCriteria')) {\n                this._config = Adapt.config.get('_completionCriteria');\n            }\n        }\n\n    });\n\n    Adapt.tracking = new Tracking();\n\n    return Adapt.tracking;\n});\n\n","define('core/js/device',[\n    'core/js/adapt',\n    'bowser'\n], function(Adapt, Bowser) {\n\n    var $html = $('html');\n    var $window = $(window);\n\n    Adapt.device = {\n        touch: Modernizr.touchevents,\n        screenWidth: getScreenWidth(),\n        screenHeight: getScreenHeight(),\n        browser: (Bowser.name || '').toLowerCase(),\n        version: (Bowser.version || '').toLowerCase(),\n        OS: getOperatingSystem().toLowerCase(),\n        osVersion: Bowser.osversion || '',\n        renderingEngine: getRenderingEngine()\n    };\n\n    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,\n    // as both these functions are getters, essentially.\n    Object.defineProperties(Adapt.device, {\n        \"orientation\": {\n            get: function () {\n                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';\n            }\n        },\n        \"aspectRatio\": {\n            get: function () {\n                return this.screenWidth / this.screenHeight;\n            }\n        }\n    });\n\n    Adapt.once('app:dataReady', function() {\n        Adapt.device.screenSize = checkScreenSize();\n\n        $html.addClass('size-' + Adapt.device.screenSize);\n        \n        if (Adapt.device.orientation) {\n            $html.addClass('orientation-' + Adapt.device.orientation);\n        }\n\n        // As Adapt.config is available it's ok to bind the 'resize'.\n        $window.on('resize orientationchange', onWindowResize);\n    });\n\n    /**\n     * Compares the calculated screen width to the breakpoints defined in config.json.\n     * \n     * @returns {string} 'large', 'medium' or 'small'\n     */\n    function checkScreenSize() {\n        var screenSizeConfig = Adapt.config.get('screenSize');\n        var screenSize;\n\n        if (Adapt.device.screenWidth > screenSizeConfig.medium) {\n            screenSize = 'large';\n        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {\n            screenSize = 'medium';\n        } else {\n            screenSize = 'small';\n        }\n\n        return screenSize;\n    }\n\n    function getScreenWidth() {\n        return isAppleDevice()\n            ? getAppleScreenWidth()\n            : window.innerWidth || $window.width();\n    }\n\n    function getScreenHeight() {\n        return isAppleDevice()\n            ? getAppleScreenHeight()\n            : window.innerHeight || $window.height();\n    }\n\n    function getOperatingSystem() {\n        var os = '';\n        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',\n            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                os = flags[i];\n                break;\n            }\n        }\n\n        if (os === '') {\n            // Fall back to using navigator.platform in case Bowser can't detect the OS.\n            var platform = navigator.platform;\n            var platforms = ['Win', 'Mac', 'Linux'];\n            os = 'PlatformUnknown';\n\n            for (var i = 0; i < platforms.length; i++) {\n                if (platform.indexOf(platforms[i]) != -1) {\n                    os = platforms[i].toLowerCase();\n                    break;\n                }\n            }\n\n            // Set consistency with the Bowser flags.\n            if (os == 'win') {\n                os = 'windows';\n            }\n        }\n\n        return os;\n    }\n\n    function getRenderingEngine() {\n        var engine = '';\n        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                engine = flags[i];\n                break;\n            }\n        }\n\n        return engine;\n    }\n\n    var onWindowResize = _.debounce(function onScreenSizeChanged() {\n        // Calculate the screen properties.\n        var previousWidth = Adapt.device.screenWidth;\n        var previousHeight = Adapt.device.screenHeight;\n\n        Adapt.device.screenWidth = getScreenWidth();\n        Adapt.device.screenHeight = getScreenHeight();\n\n        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {\n            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.\n            return;\n        }\n\n        var newScreenSize = checkScreenSize();\n\n        if (newScreenSize !== Adapt.device.screenSize) {\n            Adapt.device.screenSize = newScreenSize;\n\n            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);\n\n            if (Adapt.device.orientation) {\n                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);\n            }\n\n            Adapt.trigger('device:changed', Adapt.device.screenSize);\n        }\n\n        Adapt.trigger('device:preResize device:resize device:postResize', Adapt.device.screenWidth);\n\n    }, 100);\n\n    function isAppleDevice() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    }\n\n    function getAppleScreenWidth() {\n        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;\n    }\n\n    function getAppleScreenHeight() {\n        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;\n    }\n\n    function getAppleDeviceType() {\n        var type = '';\n\n        var flags = ['iphone', 'ipad', 'ipod'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                type = flags[i];\n                break;\n            }\n        }\n\n        return type;\n    }\n\n    function pixelDensity() {\n        var pixelDensity = (window.devicePixelRatio || 1);\n\n        if (pixelDensity >= 3) {\n            return 'ultra-high';\n        } else if (pixelDensity >= 2) {\n            return 'high';\n        } else if (pixelDensity >= 1.5) {\n            return 'medium';\n        } else {\n            return 'low';\n        }\n    }\n\n    var browser = Adapt.device.browser.toLowerCase();\n    // Convert 'msie' and 'internet explorer' to 'ie'.\n    var browserString = browser.replace(/msie|internet explorer/, 'ie');\n    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();\n    browserString += browserString.replace('.', '-').toLowerCase();\n\n    $html.addClass(browserString + ' pixel-density-' + pixelDensity());\n});\n\n","define('core/js/views/drawerView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var DrawerView = Backbone.View.extend({\n\n        className: 'drawer display-none',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this._isVisible = false;\n            this.drawerDir = 'right';\n            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left\n                this.drawerDir = 'left';\n            }\n            this.setupEventListeners();\n            this.render();\n            this.drawerDuration = Adapt.config.get('_drawer')._duration;\n            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;\n            // Setup cached selectors\n            this.$wrapper = $('#wrapper');\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'navigation:toggleDrawer': this.toggleDrawer,\n                'drawer:triggerCustomView': this.openCustomView,\n                'drawer:closeDrawer': this.onCloseDrawer,\n                'remove': this.onCloseDrawer,\n                'drawer:remove': this.remove,\n                'accessibility:toggle': this.onAccessibilityToggle\n            });\n\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.onCloseDrawer();\n        },\n\n        events: {\n            'click .drawer-back': 'onBackButtonClicked',\n            'click .drawer-close':'onCloseDrawer'\n        },\n\n        render: function() {\n            var template = Handlebars.templates['drawer']\n            $(this.el).html(template({_globals: Adapt.course.get(\"_globals\")})).prependTo('body');\n            var shadowTemplate = Handlebars.templates['shadow'];\n            $(shadowTemplate()).prependTo('body');\n            // Set defer on post render\n            _.defer(_.bind(function() {\n                this.postRender();\n            }, this));\n            return this;\n        },\n\n        // Set tabindex for select elements\n        postRender: function() {\n            this.$('a, button, input, select, textarea').attr('tabindex', -1);\n\n            this.checkIfDrawerIsAvailable();\n        },\n\n        openCustomView: function(view, hasBackButton) {\n            // Set whether back button should display\n            this._hasBackButton = hasBackButton;\n            this._isCustomViewVisible = true;\n            Adapt.trigger('drawer:empty');\n            this.showDrawer();\n            this.$('.drawer-holder').html(view);\n        },\n\n        checkIfDrawerIsAvailable: function() {\n            if (this.collection.length == 0) {\n                $('.navigation-drawer-toggle-button').addClass('display-none');\n                Adapt.trigger('drawer:noItems');\n            } else {\n                $('.navigation-drawer-toggle-button').removeClass('display-none');\n            }\n        },\n\n        onBackButtonClicked: function(event) {\n            event.preventDefault();\n            this.showDrawer(true);\n        },\n\n        onCloseDrawer: function(event) {\n            if (event) {\n                event.preventDefault();\n            }\n            this.hideDrawer();\n        },\n\n        toggleDrawer: function() {\n            if (this._isVisible && this._isCustomViewVisible === false) {\n                this.hideDrawer();\n            } else {\n                this.showDrawer(true);\n            }\n        },\n\n        showDrawer: function(emptyDrawer) {\n            this.$el.removeClass('display-none');\n            //only trigger popup:opened if drawer is visible, pass popup manager drawer element\n            if (!this._isVisible) {\n                Adapt.trigger('popup:opened', this.$el);\n                $('body').scrollDisable();\n                this._isVisible = true;\n            }\n\n            var drawerWidth = this.$el.width();\n            // Sets tab index to 0 for all tabbable elements in Drawer\n            this.$('a, button, input, select, textarea').attr('tabindex', 0);\n\n            if (emptyDrawer) {\n                this.$('.drawer-back').addClass('display-none');\n                this._isCustomViewVisible = false;\n                this.emptyDrawer();\n                if(this.collection.models.length === 1) {\n                    Adapt.trigger(this.collection.models[0].get('eventCallback'));\n                } else {\n                    this.renderItems();\n                    Adapt.trigger('drawer:openedItemView');\n                }\n            } else {\n                if (this._hasBackButton && this.collection.models.length > 1) {\n                    this.$('.drawer-back').removeClass('display-none');\n                } else {\n                    this.$('.drawer-back').addClass('display-none');\n                }\n                Adapt.trigger('drawer:openedCustomView');\n            }\n\n            //delay drawer animation until after background fadeout animation is complete\n            if (this.disableAnimation) {\n                $('#shadow').removeClass(\"display-none\");\n\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.css(direction);\n                complete.call(this);\n                \n            } else {\n\n                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {\n                    $(\"#shadow\").removeClass(\"display-none\");\n                    complete.call(this);\n                }, this)});\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.velocity(direction, this.drawerDuration, easing);\n\n            }\n\n            function complete() {\n                this.addShadowEvent();\n                Adapt.trigger('drawer:opened');\n                \n                //focus on first tabbable element in drawer\n                this.$el.a11y_focus();\n\t    }\n\n        },\n\n        emptyDrawer: function() {\n            this.$('.drawer-holder').empty();\n        },\n\n        renderItems: function() {\n            Adapt.trigger('drawer:empty');\n            this.emptyDrawer();\n            var models = this.collection.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var item = models[i];\n                new DrawerItemView({model: item});\n            }\n        },\n\n        hideDrawer: function() {\n            //only trigger popup:closed if drawer is visible\n            if (this._isVisible) {\n                Adapt.trigger('popup:closed');\n                this._isVisible = false;\n                $('body').scrollEnable();\n            } else {\n                return;\n            }\n\n            if (this.disableAnimation) {\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.css(direction).addClass('display-none');\n\n                $('#shadow').addClass(\"display-none\");\n\n                Adapt.trigger('drawer:closed');\n\n            } else {\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {\n                    this.$el.addClass('display-none');\n                    Adapt.trigger('drawer:closed');\n                }, this));\n\n                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {\n                    $('#shadow').addClass(\"display-none\");\n                }});\n\n            }\n\n            this._isCustomViewVisible = false;\n            this.removeShadowEvent();\n\n\n        },\n\n        addShadowEvent: function() {\n            $('#shadow').one('click touchstart', _.bind(function() {\n                this.onCloseDrawer();\n            }, this));\n        },\n\n        removeShadowEvent: function() {\n            $('#shadow').off('click touchstart');\n        },\n\n        remove: function() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            $(window).off(\"keyup\", this._onKeyUp);\n\n            Adapt.trigger('drawer:empty');\n            this.collection.reset();\n            $('#shadow').remove();\n        }\n\n    });\n\n    var DrawerItemView = Backbone.View.extend({\n\n        className: 'drawer-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'drawer:empty', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .drawer-item-open': 'onDrawerItemClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['drawerItem']\n            $(this.el).html(template(data)).appendTo('.drawer-holder');\n            return this;\n        },\n\n        onDrawerItemClicked: function(event) {\n            event.preventDefault();\n            var eventCallback = this.model.get('eventCallback');\n            Adapt.trigger(eventCallback);\n        }\n    });\n\n    return DrawerView;\n});\n\n","define('core/js/drawer',[\n    'core/js/adapt',\n    'core/js/views/drawerView'\n], function(Adapt, DrawerView) {\n\n    var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });\n    var Drawer = {};\n\n    Drawer.addItem = function(drawerObject, eventCallback) {\n        drawerObject.eventCallback = eventCallback;\n        DrawerCollection.add(drawerObject);\n    };\n\n    Drawer.triggerCustomView = function(view, hasBackButton) {\n        if (hasBackButton !== false) {\n            hasBackButton = true;\n        }\n        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);\n    };\n\n    Adapt.on({\n        'adapt:start': function() {\n            new DrawerView({ collection: DrawerCollection });\n        },\n        'app:languageChanged': function() {\n            Adapt.trigger('drawer:remove');\n        }\n    });\n\n    Adapt.drawer = Drawer;\n\n});\n\n","define('core/js/views/notifyView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NotifyView = Backbone.View.extend({\n\n        className: function() {\n            var classes = 'notify ';\n            classes += (this.model.get('_classes') || '');\n            return classes;\n        },\n\n        disableAnimation: false,\n\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n\n            this.setupEventListeners();\n\n            //include accessibility globals in notify model\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.render();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'remove page:scrollTo': this.closeNotify,\n                'notify:resize': this.resetNotifySize,\n                'notify:cancel': this.cancelNotify,\n                'notify:close': this.closeNotify,\n                'device:resize': this.resetNotifySize,\n                'accessibility:toggle': this.onAccessibilityToggle\n            });\n\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on('keyup', this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off('keyup', this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.cancelNotify();\n        },\n\n        events: {\n            'click .notify-popup-alert-button':'onAlertButtonClicked',\n            'click .notify-popup-prompt-button': 'onPromptButtonClicked',\n            'click .notify-popup-done': 'onCloseButtonClicked',\n            'click .notify-shadow': 'onShadowClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notify'];\n\n            //hide notify container\n            this.$el.css('visibility', 'hidden');\n            //attach popup + shadow\n            this.$el.html(template(data)).prependTo('body');\n            //hide popup\n            this.$('.notify-popup').css('visibility', 'hidden');\n            //show notify container\n            this.$el.css('visibility', 'visible');\n\n            this.showNotify();\n            return this;\n        },\n\n        onAlertButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger(this.model.get('_callbackEvent'), this);\n        },\n\n        onPromptButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger($(event.currentTarget).attr('data-event'));\n        },\n\n        onCloseButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.cancelNotify();\n        },\n\n        onShadowClicked: function(event) {\n            event.preventDefault();\n            if (this.model.get(\"_closeOnShadowClick\") === false) return;\n            this.cancelNotify();\n        },\n\n        cancelNotify: function() {\n            if (this.model.get(\"_isCancellable\") === false) return;\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger('notify:cancelled');\n        },\n\n        resetNotifySize: function() {\n            $('.notify-popup').removeAttr('style');\n\n            this.resizeNotify();\n        },\n\n        resizeNotify: function() {\n            var windowHeight = $(window).height();\n            var notifyHeight = this.$('.notify-popup').outerHeight();\n\n            if (notifyHeight > windowHeight) {\n                this.$('.notify-popup').css({\n                    'height':'100%',\n                    'top':0,\n                    'overflow-y': 'scroll',\n                    '-webkit-overflow-scrolling': 'touch'\n                });\n            } else {\n                this.$('.notify-popup').css({\n                    'margin-top': -(notifyHeight/2)\n                });\n            }\n        },\n\n        showNotify: function() {\n\n            this.addSubView();\n\n            Adapt.trigger('notify:opened', this);\n\n            this.$el.imageready( _.bind(loaded, this));\n\n            function loaded() {\n                if (this.disableAnimation) {\n                    this.$('.notify-shadow').css('display', 'block');\n                } else {\n\n                    this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, {duration:400, begin: _.bind(function() {\n                        this.$('.notify-shadow').css('display', 'block');\n                    }, this)});\n\n                }\n\n                this.resizeNotify();\n\n                if (this.disableAnimation) {\n\n                    this.$('.notify-popup').css('visibility', 'visible');\n                    complete.call(this);\n\n                } else {\n\n                    this.$('.notify-popup').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, { duration:400, begin: _.bind(function() {\n                        this.$('.notify-popup').css('visibility', 'visible');\n                        complete.call(this);\n                    }, this) });\n\n                }\n\n                function complete() {\n                    /*ALLOWS POPUP MANAGER TO CONTROL FOCUS*/\n                    Adapt.trigger('popup:opened', this.$('.notify-popup'));\n                    $('body').scrollDisable();\n                    $('html').addClass('notify');\n\n                    //set focus to first accessible element\n                    this.$('.notify-popup').a11y_focus();\n                }\n            }\n\n        },\n\n        addSubView: function() {\n\n            this.subView = this.model.get(\"_view\");\n            if (!this.subView) return;\n\n            this.$(\".notify-popup-content-inner\").append(this.subView.$el);\n\n        },\n\n        closeNotify: function (event) {\n\n            if (this.disableAnimation) {\n\n                this.$('.notify-popup').css('visibility', 'hidden');\n                this.$el.css('visibility', 'hidden');\n\n                this.remove();\n\n            } else {\n\n                this.$('.notify-popup').velocity({ opacity: 0 }, {duration:400, complete: _.bind(function() {\n                    this.$('.notify-popup').css('visibility', 'hidden');\n                }, this)});\n\n                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:400, complete:_.bind(function() {\n                    this.$el.css('visibility', 'hidden');\n                    this.remove();\n                }, this)});\n            }\n\n            $('body').scrollEnable();\n            $('html').removeClass('notify');\n\n            Adapt.trigger('popup:closed');\n            Adapt.trigger('notify:closed');\n        },\n\n        remove: function() {\n            this.removeSubView();\n            Backbone.View.prototype.remove.apply(this, arguments);\n        },\n\n        removeSubView: function() {\n\n            if (!this.subView) return;\n            this.subView.remove();\n            this.subView = null;\n\n        }\n\n    });\n\n    return NotifyView;\n\n});\n\n","define('core/js/views/notifyPushView',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var NotifyPushView = Backbone.View.extend({\n\n        className: function () {\n            return 'notify-push ' + this.model.get('_classes');\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, 'notify:pushShown notify:pushRemoved', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'remove', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'change:_index', this.updatePushPosition);\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            // Include accessibility globals in notify model.\n            this.model.set('_globals', Adapt.course.get('_globals'));\n\n            this.preRender();\n            this.render();\n        },\n\n        events: {\n            'click .notify-push-close': 'closePush',\n            'click .notify-push-inner': 'triggerEvent'\n        },\n\n        preRender: function () {\n            this.hasBeenRemoved = false;\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notifyPush'];\n            this.$el.html(template(data)).appendTo('#wrapper');\n\n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n\n            return this;\n        },\n\n        postRender: function () {\n            this.$el.addClass('show');\n\n            _.delay(_.bind(function () {\n                this.closePush();\n            }, this), this.model.get('_timeout'));\n\n            Adapt.trigger('notify:pushShown');\n        },\n\n        closePush: function (event) {\n            if (event) {\n                event.preventDefault();\n            }\n\n            // Check whether this view has been removed as the delay can cause it to be fired twice\n            if (this.hasBeenRemoved === false) {\n\n                this.hasBeenRemoved = true;\n\n                this.$el.removeClass('show');\n\n                _.delay(_.bind(function () {\n                    this.model.collection.remove(this.model);\n                    Adapt.trigger('notify:pushRemoved', this);\n                    this.remove();\n                }, this), 600);\n            }\n        },\n\n        triggerEvent: function (event) {\n            Adapt.trigger(this.model.get('_callbackEvent'));\n            this.closePush();\n        },\n\n        updateIndexPosition: function () {\n            if (!this.hasBeenRemoved) {\n                var models = this.model.collection.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var index = i;\n                    var model = models[i];\n                    if (model.get('_isActive') === true) {\n                        model.set('_index', index);\n                        this.updatePushPosition();\n                    }\n                }\n            }\n        },\n\n        updatePushPosition: function () {\n            if (this.hasBeenRemoved) {\n                return;\n            }\n\n            if (this.model.get('_index') != undefined) {\n                var elementHeight = this.$el.height();\n                var offset = 20;\n                var navigationHeight = $('.navigation').height();\n                var currentIndex = this.model.get('_index');\n                var flippedIndex = (currentIndex == 0) ? 1 : 0;\n\n                if (this.model.collection.where({ _isActive: true }).length === 1) {\n                    flippedIndex = 0;\n                }\n\n                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;\n                this.$el.css('top', positionLowerPush);\n            }\n        }\n    });\n\n    return NotifyPushView;\n\n});\n\n","define('core/js/models/notifyModel',[],function() {\n\n    var NotifyModel = Backbone.Model.extend({\n        defaults: {\n        \t_isActive:false,\n        \t_showIcon:false,\n        \t_timeout:3000\n        }\n    });\n\n    return NotifyModel;\n\n});\n\n","define('core/js/notify',[\n\t'core/js/adapt',\n\t'core/js/views/notifyView',\n\t'core/js/views/notifyPushView',\n\t'core/js/models/notifyModel'\n], function(Adapt, NotifyView, NotifyPushView, NotifyModel) {\n\n\t// Build a collection to store push notifications\n\tvar NotifyPushCollection = Backbone.Collection.extend({\n\n\t\tmodel: NotifyModel,\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo(this, 'add', this.onPushAdded);\n\t\t\tthis.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);\n\t\t},\n\n\t\tonPushAdded: function(model) {\n\t\t\tthis.checkPushCanShow(model);\n\t\t},\n\n\t\tcheckPushCanShow: function(model) {\n\t\t\tif (this.canShowPush()) {\n\t\t\t\tmodel.set('_isActive', true);\n\t\t\t\tthis.showPush(model);\n\t\t\t}\n\t\t},\n\n\t\tcanShowPush: function() {\n\t\t\tvar availablePushNotifications = this.where({_isActive:true});\n\t\t\tif (availablePushNotifications.length >= 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tshowPush: function(model) {\n\t\t\tnew NotifyPushView({\n\t\t\t\tmodel: model\n\t\t\t});\n\t\t},\n\n\t\tonRemovePush: function(view) {\n\t\t\tvar inactivePushNotifications = this.where({_isActive:false});\n\t\t\tif (inactivePushNotifications.length > 0) {\n\t\t\t\tthis.checkPushCanShow(inactivePushNotifications[0]);\n\t\t\t}\n\t\t}\n\n\t});\n\n\tvar NotifyPushes = new NotifyPushCollection();\n\n\tAdapt.on('notify:alert', function(notifyObject) {\n\t\taddNotifyView('alert', notifyObject);\n\t});\n\n\tAdapt.on('notify:prompt', function(notifyObject) {\n\t\taddNotifyView('prompt', notifyObject);\n\t});\n\n\tAdapt.on('notify:popup', function(notifyObject) {\n\t\taddNotifyView('popup', notifyObject);\n\t});\n\n\tAdapt.on('notify:push', function(notifyObject) {\n\t\taddNotifyView('push', notifyObject);\n\t});\n\n\tfunction addNotifyView(type, notifyObject) {\n\t\t// set default values \n\t\tnotifyObject._isCancellable = (notifyObject._isCancellable === undefined) \n\t\t\t? true : notifyObject._isCancellable;\n\t\t\n\t\tnotifyObject._showCloseButton = (notifyObject._showCloseButton === undefined) \n\t\t\t? true : notifyObject._showCloseButton;\n\n\t\tnotifyObject._closeOnShadowClick = (notifyObject._closeOnShadowClick === undefined) \n\t\t\t? true : notifyObject._closeOnShadowClick;\n\n\t\tnotifyObject._type = type;\n\n\t\tif (type === 'push') {\n\n\t\t\tNotifyPushes.push(notifyObject);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar notify = new NotifyView({\n\t\t\tmodel: new NotifyModel(notifyObject)\n\t\t});\n\n\t}\n\n});\n\n","define('core/js/popupManager',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    Adapt.on('popup:opened', function($element) {\n\n\t\t//capture currently active element or element specified\n        var $activeElement = $element || $(document.activeElement);\n\n        //save tab indexes\n        $activeElement.a11y_popup();\n    });\n\n    Adapt.on('popup:closed', function() {\n\n        //restore tab indexes\n        $.a11y_popdown();\n\n    });\n\n});\n\n","define('core/js/models/routerModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n \tvar RouterModel = Backbone.Model.extend({\n\n \t\tdefaults: {\n \t\t\t_canNavigate: true\n \t\t},\n\n \t\tlockedAttributes: {\n \t\t\t_canNavigate: false\n \t\t}\n \t\t\n \t});\n\n \treturn RouterModel;\n\n });\n\n","define('core/js/views/adaptView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptView = Backbone.View.extend({\n\n        attributes: function() {\n            return {\n                \"data-adapt-id\": this.model.get('_id')\n            };\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, {\n                'change:_isVisible': this.toggleVisibility,\n                'change:_isHidden': this.toggleHidden,\n                'change:_isComplete': this.onIsCompleteChange\n            });\n            this.model.set( {\n                '_globals': Adapt.course.get('_globals'),\n                '_isReady': false\n            });\n            this._isRemoved = false;\n            this.preRender();\n            this.render();\n            this.setupOnScreenHandler();\n        },\n\n        preRender: function() {},\n\n        postRender: function() {\n            this.addChildren();\n        },\n\n        render: function() {\n            Adapt.trigger(this.constructor.type + 'View:preRender', this);\n\n            var data = this.model.toJSON();\n            data.view = this;\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n\n            _.defer(function() {\n                // don't call postRender after remove\n                if(this._isRemoved) return;\n\n                this.postRender();\n                Adapt.trigger(this.constructor.type + 'View:postRender', this);\n            }.bind(this));\n\n            return this;\n        },\n\n        setupOnScreenHandler: function() {\n            var onscreen = this.model.get('_onScreen');\n\n            if (!onscreen || !onscreen._isEnabled) return;\n\n            this.$el.on('onscreen.adaptView', function (e, m) {\n\n                if (!m.onscreen) return;\n\n                var minVerticalInview = onscreen._percentInviewVertical || 33;\n\n                if (m.percentInviewVertical < minVerticalInview) return;\n\n                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');\n\n            }.bind(this));\n        },\n\n        addChildren: function() {\n            var nthChild = 0;\n            var children = this.model.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var model = models[i];\n                if (model.get('_isAvailable')) {\n                    nthChild ++;\n\n                    var ChildView;\n                    var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get(\"_component\")];\n\n                    //use view+model object\n                    if (ViewModelObject.view) ChildView = ViewModelObject.view;\n                    //use view only object\n                    else ChildView = ViewModelObject;\n\n                    if (ChildView) {\n                        var $parentContainer = this.$(this.constructor.childContainer);\n                        model.set(\"_nthChild\", nthChild);\n                        if (Adapt.config.get(\"_defaultDirection\") == 'rtl' && model.get(\"_type\") == 'component') {\n                            $parentContainer.prepend(new ChildView({model:model}).$el);\n                        } else {\n                            $parentContainer.append(new ChildView({model:model}).$el);\n                        }\n                    } else {\n                        throw 'The component \\'' + models[i].attributes._id + '\\'' +\n                              ' (\\'' + models[i].attributes._component + '\\')' +\n                              ' has not been installed, and so is not available in your project.';\n                    }\n                }\n            }\n        },\n\n        setReadyStatus: function() {\n            this.model.set('_isReady', true);\n        },\n\n        setCompletionStatus: function() {\n            if (this.model.get('_isVisible')) {\n                this.model.set({\n                    '_isComplete': true,\n                    '_isInteractionComplete': true\n                });\n            }\n        },\n\n        resetCompletionStatus: function(type) {\n            if (!this.model.get(\"_canReset\")) return;\n\n            var descendantComponents = this.model.findDescendantModels('components');\n            if (descendantComponents.length === 0) {\n                this.model.reset(type);\n            } else {\n                _.each(descendantComponents, function(model) {\n                    model.reset(type);\n                });\n            }\n        },\n\n        preRemove: function() {},\n\n        remove: function() {\n\n            this.preRemove();\n            this._isRemoved = true;\n\n            Adapt.wait.for(function(end) {\n\n                this.$el.off('onscreen.adaptView');\n                this.model.setOnChildren('_isReady', false);\n                this.model.set('_isReady', false);\n                Backbone.View.prototype.remove.call(this);\n\n                end();\n            }.bind(this));\n\n            return this;\n        },\n\n        setVisibility: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n            return visible;\n        },\n\n        toggleVisibility: function() {\n            if (this.model.get('_isVisible')) {\n                return this.$el.removeClass('visibility-hidden');\n            }\n            this.$el.addClass('visibility-hidden');\n        },\n\n        setHidden: function() {\n            var hidden = \"\";\n            if (this.model.get('_isHidden')) {\n                hidden = \"display-none\";\n            }\n            return hidden;\n        },\n\n        toggleHidden: function() {\n            if (!this.model.get('_isHidden')) {\n                return this.$el.removeClass('display-none');\n            }\n            this.$el.addClass('display-none');\n        },\n        \n        onIsCompleteChange:function(model, isComplete){\n            this.$el.toggleClass('completed', isComplete);\n        }\n    });\n\n    return AdaptView;\n\n});\n\n","define('core/js/views/blockView',[\n    'core/js/views/adaptView'\n], function(AdaptView) {\n\n    var BlockView = AdaptView.extend({\n\n        className: function() {\n            return \"block \" + \n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        }\n\n    }, {\n        childContainer: '.component-container',\n        type: 'block',\n        template: 'block'\n    });\n\n    return BlockView;\n\n});\n\n","define('core/js/views/articleView',[\n    'core/js/views/adaptView',\n    'core/js/views/blockView'\n], function(AdaptView, BlockView) {\n\n    var ArticleView = AdaptView.extend({\n        \n        className: function() {\n            return \"article \" +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        }\n\n    }, {\n        childContainer: '.block-container',\n        childView: BlockView,\n        type: 'article',\n        template: 'article'\n    });\n\n    return ArticleView;\n\n});\n\n","define('core/js/views/pageView',[\n    'core/js/adapt',\n    'core/js/views/adaptView',\n    'core/js/views/articleView'\n], function(Adapt, AdaptView, ArticleView) {\n\n    var PageView = AdaptView.extend({\n        \n        className: function() {\n            return \"page \" + \n            this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        },\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n\n            var accessibility = Adapt.config.get('_accessibility');\n            if (!accessibility._isEnabled && !accessibility._isEnabledOnTouchDevices) {\n                return;\n            }\n            // create aria-label outside of #wrapper\n            this.$pageLabel = $('<div/>', {\n                'class': 'aria-label relative a11y-ignore-focus prevent-default',\n                tabindex: 0,\n                role: 'region',\n                text: Adapt.course.get('_globals')._accessibility._ariaLabels.pageEnd\n            }).appendTo('body');\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('pageView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        },\n\n        remove: function() {\n            if (this.$pageLabel) {\n                this.$pageLabel.remove();\n            }\n            AdaptView.prototype.remove.call(this);\n        }\n\n    }, {\n        childContainer: '.article-container',\n        childView: ArticleView,\n        type: 'page',\n        template: 'page'\n    });\n\n    return PageView;\n\n});\n\n","define('core/js/router',[\n    'core/js/adapt',\n    'core/js/models/routerModel',\n    'core/js/views/pageView',\n    'core/js/startController'\n], function(Adapt, RouterModel, PageView) {\n\n    Adapt.router = new RouterModel(null, { reset: true });\n\n    var Router = Backbone.Router.extend({\n\n        // Flag to indicate if the router has tried to redirect to the current location.\n        _isCircularNavigationInProgress: false,\n\n        initialize: function() {\n            this.showLoading();\n\n            // Store #wrapper element and html to cache for later use.\n            this.$wrapper = $('#wrapper');\n            this.$html = $('html');\n\n            Adapt.once('app:dataReady', function() {\n                document.title = Adapt.course.get('title');\n            });\n\n            this.listenTo(Adapt, {\n                'navigation:backButton': this.navigateToPreviousRoute,\n                'navigation:homeButton': this.navigateToHomeRoute,\n                'navigation:skipNavigation': this.skipNavigation,\n                'navigation:parentButton': this.navigateToParent,\n                'router:navigateTo': this.navigateToArguments\n            });\n        },\n\n        routes: {\n            '': 'handleRoute',\n            'id/:id': 'handleRoute',\n            ':pluginName(/*location)(/*action)': 'handleRoute'\n        },\n\n        pruneArguments: function(args) {\n            var prunedArgs = _.toArray(args);\n\n            if (prunedArgs.length !== 0) {\n                // Remove any null arguments.\n                prunedArgs = _.without(args, null);\n            }\n\n            return prunedArgs;\n        },\n\n        handleRoute: function() {\n            var args = this.pruneArguments(arguments);\n            \n            if (Adapt.router.get('_canNavigate')) {\n                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.\n                this._isCircularNavigationInProgress = false;\n            }\n\n            // Check if the current page is in the process of navigating to itself.\n            // It will redirect to itself if the URL was changed and _canNavigate is false.\n            if (this._isCircularNavigationInProgress === false) {\n                // Trigger an event pre 'router:location' to allow extensions to stop routing.\n                Adapt.trigger('router:navigate', args);\n            }\n\n            // Re-check as _canNavigate can be set to false on 'router:navigate' event.\n            if (Adapt.router.get('_canNavigate')) {\n                // Disable navigation whilst rendering.\n                Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });\n\n                switch (args.length) {\n                    case 1:\n                        // If only one parameter assume it's the ID.\n                        return this.handleId.apply(this, args);\n                    case 2:\n                        // If there are two parameters assume it's a plugin.\n                        return this.handlePluginRouter.apply(this, args);\n                    default:\n                        // Route to course home page.\n                        return this.handleCourse();\n                }\n            }\n\n            if (this._isCircularNavigationInProgress) {\n                // Navigation correction finished.\n                // Router has successfully re-navigated to the current _id as the URL was changed \n                // while _canNavigate: false\n                this._isCircularNavigationInProgress = false;\n                return;\n            }\n\n            // Cancel navigation to stay at the current location.\n            this._isCircularNavigationInProgress = true;\n            Adapt.trigger('router:navigationCancelled', args);\n\n            // Reset URL to the current one.\n            this.navigateToCurrentRoute(true);\n        },\n\n        handlePluginRouter: function(pluginName, location, action) {\n            var pluginLocation = pluginName;\n\n            if (location) {\n                pluginLocation = pluginLocation + '-' +location;\n\n                if (action) {\n                    pluginLocation = pluginLocation + '-' + action;\n                }\n            }\n\n            this.updateLocation(pluginLocation, null, null, function() {\n                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);\n                Adapt.trigger('router:plugin', pluginName, location, action);\n\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n            });\n        },\n\n        handleCourse: function() {\n            if (Adapt.course.has('_start')) {\n                // Do not allow access to the menu when the start controller is enabled.\n                var startController = Adapt.course.get('_start');\n\n                if (startController._isEnabled == true && startController._isMenuDisabled == true) {\n                    return;\n                }\n            }\n\n            this.showLoading();\n\n            this.removeViews(_.bind(function() {\n                Adapt.course.set('_isReady', false);\n\n                this.setContentObjectToVisited(Adapt.course);\n                \n                this.updateLocation('course', null, null, _.bind(function() {\n                    Adapt.once('menuView:ready', function() {\n                        // Allow navigation.\n                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    });\n\n                    Adapt.trigger('router:menu', Adapt.course);\n                }, this));\n            }, this));\n        },\n\n        handleId: function(id) {\n            var currentModel = Adapt.findById(id);\n            var type = '';\n\n            if (!currentModel) {\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                return;\n            }\n\n            type = currentModel.get('_type');\n\n            switch (type) {\n                case 'page':\n                case 'menu':\n                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {\n                        Adapt.log.warn('Unable to navigate to locked id: ' + id);\n                        Adapt.router.set('_canNavigate', true, {pluginName: 'adapt'});\n                        if (Adapt.location._previousId === undefined) {\n                            return this.navigate('#/', { trigger: true, replace: true });\n                        } else {\n                            return Backbone.history.history.back();\n                        }\n                    } else {\n                        this.showLoading();\n                        this.removeViews(_.bind(function() {\n\n                            this.setContentObjectToVisited(currentModel);\n\n                            if (type == 'page') {\n                                var location = 'page-' + id;\n                                this.updateLocation(location, 'page', id, _.bind(function() {\n                                    Adapt.once('pageView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:page', currentModel);\n                                    this.$wrapper.append(new PageView({ model: currentModel }).$el);\n                                }, this));\n                            } else {\n                                var location = 'menu-' + id;\n                                this.updateLocation(location, 'menu', id, _.bind(function() {\n                                    Adapt.once('menuView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:menu', currentModel);\n                                }, this));\n                            }\n                        }, this));\n                    }\n                    break;\n                default:\n                    // Allow navigation.\n                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    Adapt.navigateToElement('.' + id, { replace: true });\n            }\n        },\n\n        removeViews: function(onComplete) {\n            Adapt.remove();\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        showLoading: function() {\n            $('.loading').show();\n        },\n\n        navigateToArguments: function(args) {\n            args = this.pruneArguments(args);\n\n            var options = { trigger: false, replace: false };\n\n            switch (args.length) {\n                case 0:\n                    this.navigate('#/', options);\n                    break;\n                case 1:\n                    if (Adapt.findById(args[0])) {\n                        this.navigate('#/id/' + args[0], options);\n                    } else {\n                        this.navigate('#/' + args[0], options);\n                    }\n                    break;\n                case 2:\n                case 3:\n                    this.navigate('#/' + args.join('/'), options);\n                    break;\n                default:\n                    Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +\n                        'window.location.href instead of Adapt.trigger(\"router:navigateTo\")');\n                    this.handleRoute.apply(this, args);\n            }\n        },\n\n        skipNavigation: function() {\n             $('.' + Adapt.location._contentType).a11y_focus();\n        },\n\n        navigateToPreviousRoute: function(force) {\n            // Sometimes a plugin might want to stop the default navigation.\n            // Check whether default navigation has changed.\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {\n                    return this.navigateToParent();\n                }\n                if (Adapt.location._previousContentType === 'page') {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._currentLocation === 'course') {\n                    return;\n                }\n                this.navigateToParent();\n            }\n        },\n\n        navigateToHomeRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force ) {\n                this.navigate('#/', { trigger: true });\n            }\n        },\n\n        navigateToCurrentRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return;\n                }\n                var currentId = Adapt.location._currentId;\n                var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;\n                this.navigate(route, { trigger: true, replace: true });\n            }\n        },\n\n        navigateToParent: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');\n                var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;\n                this.navigate(route, { trigger: true });\n            }\n        },\n\n        setContentObjectToVisited: function(model) {\n            model.set('_isVisited', true);\n        },\n\n        updateLocation: function(currentLocation, type, id, onComplete) {\n            // Handles updating the location.\n            Adapt.location._previousId = Adapt.location._currentId;\n            Adapt.location._previousContentType = Adapt.location._contentType;\n\n            if (currentLocation === 'course') {\n                Adapt.location._currentId = Adapt.course.get('_id');\n                Adapt.location._contentType = 'menu';\n                Adapt.location._lastVisitedMenu = currentLocation;\n            } else if (!type) {\n                Adapt.location._currentId = null;\n                Adapt.location._contentType = null;\n            } else if (_.isString(id)) {\n                Adapt.location._currentId = id;\n                Adapt.location._contentType = type;\n\n                if (type === 'menu') {\n                    Adapt.location._lastVisitedType = 'menu';\n                    Adapt.location._lastVisitedMenu = id;\n                } else if (type === 'page') {\n                    Adapt.location._lastVisitedType = 'page';\n                    Adapt.location._lastVisitedPage = id;\n                }\n            }\n\n            Adapt.location._currentLocation = currentLocation;\n\n            var classes = (Adapt.location._currentId) ? 'location-'\n                    + Adapt.location._contentType\n                    + ' location-id-'\n                    + Adapt.location._currentId :\n                    'location-' + Adapt.location._currentLocation;\n\n            var previousClasses = Adapt.location._previousClasses;\n            if (previousClasses) {\n                this.$html.removeClass(previousClasses);\n            }\n            Adapt.location._previousClasses = classes;\n\n            this.$html\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n                \n            this.$wrapper\n                .removeClass()\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n\n            this.setDocumentTitle();\n\n            // Trigger event when location changes.\n            Adapt.trigger('router:location', Adapt.location);\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        setDocumentTitle: function() {\n            if (!Adapt.location._currentId) return;\n\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n            var pageTitle = '';\n\n            if (currentModel && currentModel.get('_type') !== 'course') {\n                var currentTitle = currentModel.get('title');\n                \n                if (currentTitle) {\n                    pageTitle = ' | ' + currentTitle;\n                }\n            }\n\n            var courseTitle = Adapt.course.get('title');\n            var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();\n\n            Adapt.once('pageView:ready menuView:ready', function() {\n                document.title = documentTitle;\n            });\n        }\n    });\n\n    return new Router({ model: new Backbone.Model() });\n\n});\n\n","define('core/js/helpers',[\n    'handlebars',\n    'core/js/adapt'\n], function(Handlebars, Adapt){\n\n    var helpers = {\n\n        lowercase: function(text) {\n            return text.toLowerCase();\n        },\n\n        capitalise:  function(text) {\n            return text.charAt(0).toUpperCase() + text.slice(1);\n        },\n\n        inc: function(index) {\n            return index+1;\n        },\n\n        dec: function(index) {\n            return index-1;\n        },\n\n        odd: function (index) {\n            return (index +1) % 2 === 0  ? 'even' : 'odd';\n        },\n\n        equals: function(value, text, block) {\n            return helpers.compare.call(this, value, \"==\", text, block);\n        },\n\n        compare: function(value, operator, text, block) {\n            // Comparison operators\n            switch (operator) {\n            case \"===\":\n                if (value === text) return block.fn(this);\n                break;\n            case \"=\": case \"==\":\n                if (value == text) return block.fn(this);\n                break;\n            case \">=\":\n                if (value >= text) return block.fn(this);\n                break;\n            case \"<=\":\n                if (value <= text) return block.fn(this);\n                break;\n            case \">\":\n                if (value > text) return block.fn(this);\n                break;\n            case \"<\":\n                if (value < text) return block.fn(this);\n                break;\n            }\n            return block.inverse(this);\n        },\n\n        math: function(lvalue, operator, rvalue, options) {\n            // Mathematical operators\n            lvalue = parseFloat(lvalue);\n            rvalue = parseFloat(rvalue);\n            switch (operator) {\n            case \"+\": return lvalue + rvalue;\n            case \"-\": return lvalue - rvalue;\n            case \"*\": return lvalue * rvalue;\n            case \"/\": return lvalue / rvalue;\n            case \"%\": return lvalue % rvalue;\n            }\n        },\n        \n        /**\n         * Equivalent to:\n         *  if (conditionA || conditionB)\n         * @example\n         * {{#any displayTitle body instruction}}\n         * <div class=\"component__header {{_component}}__header\"></div>\n         * {{/any}}\n         */\n        any: function() {\n            var args = Array.prototype.slice.call(arguments, 0, -1);\n            var block = Array.prototype.slice.call(arguments, -1)[0];\n\n            return _.any(args) ? block.fn(this) : block.inverse(this);\n        },\n\n        /**\n         * Equivalent to:\n         *  if (conditionA && conditionB)\n         * @example\n         * {{#all displayTitle body instruction}}\n         * <div class=\"component__header {{_component}}__header\"></div>\n         * {{/all}}\n         */\n        all: function() {\n            var args = Array.prototype.slice.call(arguments, 0, -1);\n            var block = Array.prototype.slice.call(arguments, -1)[0];\n\n            return _.all(args) ? block.fn(this) : block.inverse(this);\n        },\n\n        /**\n         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON\n         */\n        compile: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            var data = this;\n            if (context) {\n                // choose between a passed argument context or the default handlebars helper context\n                data = (!context.data || !context.data.root ? context : context.data.root);\n            }\n            return Handlebars.compile(template)(data);\n        },\n\n        /**\n         * Allow JSON to be a template and accessible text\n         */\n        compile_a11y_text: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_text.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Allow JSON to be a template and normalized text\n         */\n        compile_a11y_normalize: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Remove all html tags except styling tags\n         */\n        compile_a11y_remove_breaks: function(template, context) {\n            if (!template) return \"\";\n            return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * makes the _globals object in course.json available to a template\n         */\n        import_globals: function(context) {\n            if (context.data.root._globals) return \"\";\n            context.data.root._globals = Adapt.course.get('_globals');\n            return \"\";\n        },\n\n        /**\n         * makes the Adapt module data available to a template\n         */\n        import_adapt: function(context) {\n\n            if (context.data.root.Adapt) return;\n            var adapt = context.data.root.Adapt = {};\n\n            var i, l, name;\n\n            var directImport = ['config','course'];\n            for (i = 0, l = directImport.length; i < l; i++) {\n                name = directImport[i];\n                // convert the model to a json object and add to the current context\n                adapt[name] = Adapt[name].toJSON();\n            }\n\n            var indexedImport = ['contentObjects','articles','blocks','components'];\n            for (i = 0, l = indexedImport.length; i < l; i++) {\n                name = indexedImport[i];\n                // convert the collection of models to an array of json objects\n                var importArray = Adapt[name].toJSON();\n                // convert the array of json models to an object indexed by id\n                var importIndex = {};\n                for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {\n                    var item = importArray[i1];\n                    importIndex[item._id] = item;\n                }\n                // add the indexed object to the current context\n                adapt[name] = importIndex;\n            }\n\n            return \"\";\n\n        }\n\n    };\n\n    // Compatibility references\n    helpers['if_value_equals'] = helpers['equals'];\n    helpers['numbers'] = helpers['inc'];\n    helpers['lowerCase'] = helpers['lowercase'];\n\n    for (var name in helpers) {\n        if (helpers.hasOwnProperty(name)) {\n             Handlebars.registerHelper(name, helpers[name]);\n        }\n    }\n\n    return helpers;\n\n});\n\n","define('core/js/views/componentView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var ComponentView = AdaptView.extend({\n\n        className: function() {\n            return \"component \" + \n            this.model.get('_component') + \n            \"-component \" + this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" component-\" + this.model.get('_layout') + \n            \" nth-child-\" + this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        },\n\n        initialize: function(){\n\t\t\t//standard initialization + renderState function\n            AdaptView.prototype.initialize.apply(this, arguments);\n            this.renderState();\n        },\n\n        renderState: function() {\n            if (!Handlebars.partials['state']) return;\n\n            // the preferred way to indicate that a state is not required\n            if (this.model.get('_disableAccessibilityState')) return;\n            // do not perform if component has .not-accessible class\n            if (this.$el.is(\".not-accessible\")) return;\n\t\t\t// do not perform if component has .no-state class\n            if (this.$el.is(\".no-state\")) return;\n\n            var $previousState = this.$(\".accessibility-state\");\n            var isStateRendered = $previousState.length;\n\n            var data = _.extend(this.model.toJSON(), {a11yConfig: Adapt.config.get('_accessibility')});\n            var element = Handlebars.partials['state'](data);\n\n            if (isStateRendered) {\n                $previousState.html(element);\n            } else {\n                this.$el.append(element);\n            }\n\n            this.listenToOnce(this.model, 'change:_isComplete', this.renderState);\n        },\n\n        postRender: function() {}\n\n    }, {\n        type:'component'\n    });\n\n    return ComponentView;\n\n});\n\n","define('components/adapt-contrib-graphic/js/adapt-contrib-graphic',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Graphic = ComponentView.extend({\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.resizeImage);\n\n            // Checks to see if the graphic should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.resizeImage(Adapt.device.screenSize, true);\n        },\n\n        // Used to check if the graphic should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-widget').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        },\n\n        remove: function() {\n          // Remove any 'inview' listener attached.\n          this.$('.component-widget').off('inview');\n\n          ComponentView.prototype.remove.apply(this, arguments);\n        },\n\n        resizeImage: function(width, setupInView) {\n            var imageWidth = width === 'medium' ? 'small' : width;\n            var imageSrc = (this.model.get('_graphic')) ? this.model.get('_graphic')[imageWidth] : '';\n            this.$('.graphic-widget img').attr('src', imageSrc);\n\n            this.$('.graphic-widget').imageready(_.bind(function() {\n                this.setReadyStatus();\n\n                if (setupInView) {\n                    // Bind 'inview' once the image is ready.\n                    this.$('.component-widget').on('inview', _.bind(this.inview, this));\n                }\n            }, this));\n        }\n    });\n\n    Adapt.register('graphic', Graphic);\n\n    return Graphic;\n\n});\n\n","define('core/js/views/buttonsView',[\n    'core/js/adapt',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, BUTTON_STATE) {\n\n    //convert BUTTON_STATE to property name\n    var textPropertyName = {\n        \"SUBMIT\": \"submit\",\n        \"CORRECT\": \"correct\",\n        \"INCORRECT\": \"incorrect\",\n        \"SHOW_CORRECT_ANSWER\": \"showCorrectAnswer\",\n        \"HIDE_CORRECT_ANSWER\": \"hideCorrectAnswer\",\n        \"SHOW_FEEDBACK\": \"showFeedback\",\n        \"RESET\": \"reset\"\n    };\n\n    var ButtonsView = Backbone.View.extend({\n\n        initialize: function(options) {\n            this.parent = options.parent;\n\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_buttonState', this.onButtonStateChanged);\n            this.listenTo(this.model, 'change:feedbackMessage', this.onFeedbackMessageChanged);\n            this.listenTo(this.model, 'change:_attemptsLeft', this.onAttemptsChanged);\n            this.render();\n        },\n\n        events: {\n            'click .buttons-action': 'onActionClicked',\n            'click .buttons-feedback': 'onFeedbackClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['buttons'];\n            _.defer(_.bind(function() {\n                this.postRender();\n                Adapt.trigger('buttonsView:postRender', this);\n            }, this));\n            this.$el.html(template(data));\n        },\n\n        postRender: function() {\n            this.refresh();\n        },\n\n        checkResetSubmittedState: function() {\n            var isSubmitted = this.model.get('_isSubmitted');\n\n            if (!isSubmitted) {\n\n                var $icon = this.$('.buttons-marking-icon');\n                $icon.removeClass('icon-cross');\n                $icon.removeClass('icon-tick');\n                $icon.addClass('display-none');\n                this.$el.removeClass(\"submitted\");\n                this.model.set('feedbackMessage', undefined);\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\n\n            } else {\n\n                this.$el.addClass(\"submitted\");\n\n            }\n        },\n\n        onActionClicked: function() {\n            var buttonState = this.model.get('_buttonState');\n            this.trigger('buttons:stateUpdate', BUTTON_STATE(buttonState));\n            this.checkResetSubmittedState();\n        },\n\n        onFeedbackClicked: function() {\n            this.trigger('buttons:stateUpdate', BUTTON_STATE.SHOW_FEEDBACK);\n        },\n\n        onFeedbackMessageChanged: function(model, changedAttribute) {\n            if (changedAttribute && this.model.get('_canShowFeedback')) {\n                //enable feedback button\n                this.$('.buttons-feedback').a11y_cntrl_enabled(true);\n            } else {\n                //disable feedback button\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\n            }\n        },\n\n        onButtonStateChanged: function(model, changedAttribute) {\n            // Use 'correct' instead of 'complete' to signify button state\n            var buttonState = BUTTON_STATE(changedAttribute);\n            if (changedAttribute === BUTTON_STATE.CORRECT || changedAttribute === BUTTON_STATE.INCORRECT) {\n                // Both 'correct' and 'incorrect' states have no model answer, so disable the submit button\n                this.$('.buttons-action').a11y_cntrl_enabled(false);\n\n                if (!this.model.get(\"_canShowFeedback\")) {\n                    if (!this.$el.is(\".no-state\")) {\n                        //if no feedback, complete correct and has state, force focus to component state\n                        _.defer(_.bind(function() {\n                            $(\".\" + this.model.get(\"_id\") + \" .accessibility-state [tabindex]\").focusNoScroll();\n                        }, this));\n                    }\n                }\n              \n            } else {\n\n                var propertyName = textPropertyName[buttonState.asString];\n                var ariaLabel = this.model.get('_buttons')[\"_\" + propertyName].ariaLabel;\n                var buttonText = this.model.get('_buttons')[\"_\" + propertyName].buttonText;\n\n                // Enable the button, make accessible and update aria labels and text\n                this.$('.buttons-action').a11y_cntrl_enabled(true).html(buttonText).attr('aria-label', ariaLabel);\n\n                // Make model answer button inaccessible (but still enabled) for visual users due to\n                // the inability to represent selected incorrect/correct answers to a screen reader, may need revisiting\n                switch (changedAttribute) {\n                    case BUTTON_STATE.SHOW_CORRECT_ANSWER:\n                    case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                        this.$('.buttons-action').a11y_cntrl(false);\n                }\n\n            }\n\n            this.updateAttemptsCount();\n        },\n\n        checkFeedbackState: function(){\n            var canShowFeedback = this.model.get('_canShowFeedback');\n\n            this.$('.buttons-action').toggleClass('buttons-action-fullwidth buttons-action-enlarge', !canShowFeedback);\n            this.$('.buttons-feedback').toggleClass('no-feedback', !canShowFeedback);\n            this.$('.buttons-marking-icon').toggleClass('no-feedback', !canShowFeedback);\n        },\n\n        updateAttemptsCount: function(model, changedAttribute) {\n            var isInteractionComplete = this.model.get('_isInteractionComplete');\n            var attemptsLeft = (this.model.get('_attemptsLeft')) ? this.model.get('_attemptsLeft') : this.model.get('_attempts');\n            var isCorrect = this.model.get('_isCorrect');\n            var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');\n            var attemptsString;\n\n            this.checkResetSubmittedState();\n\n            if (!isInteractionComplete && attemptsLeft != 0) {\n                attemptsString = attemptsLeft + \" \";\n                if (attemptsLeft > 1) {\n                    attemptsString += this.model.get('_buttons').remainingAttemptsText;\n                } else if (attemptsLeft === 1){\n                    attemptsString += this.model.get('_buttons').remainingAttemptText;\n                }\n\n            } else {\n                this.$('.buttons-display-inner').addClass('visibility-hidden');\n                this.showMarking();\n            }\n\n            if (shouldDisplayAttempts) {\n                this.$('.buttons-display-inner').a11y_text(attemptsString);\n            }\n\n        },\n\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.$('.buttons-marking-icon')\n                .removeClass('display-none')\n                .addClass(this.model.get('_isCorrect') ? 'icon-tick' : 'icon-cross');\n        },\n\n        refresh: function() {\n            this.updateAttemptsCount();\n            this.checkResetSubmittedState();\n            this.checkFeedbackState();\n            this.onButtonStateChanged(null, this.model.get('_buttonState'));\n            this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));\n        }\n\n    });\n\n    return ButtonsView;\n\n});\n\n","define('core/js/views/questionView',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/views/buttonsView',\n    'core/js/models/questionModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentView, ButtonsView, QuestionModel, BUTTON_STATE) {\n\n    var useQuestionModelOnly = false;\n\n    var QuestionView = ComponentView.extend({\n\n        className: function() {\n            return \"component \"\n            + \"question-component \"\n            + this.model.get('_component')\n            + \"-component \" + this.model.get('_id')\n            + \" \" + this.model.get('_classes')\n            + \" \" + this.setVisibility()\n            + \" component-\" + this.model.get('_layout')\n            + \" nth-child-\" + this.model.get(\"_nthChild\")\n            + (this.model.get('_isComplete') ? ' completed' : '');\n        },\n\n        //////\n        // Setup question types\n        ////\n\n        preRender: function() {\n            // Setup listener for _isEnabled\n            this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);\n\n            this.listenTo(this.model, 'question:refresh', this.refresh);\n\n            // Checks to see if the question should be reset on revisit\n            this.checkIfResetOnRevisit();\n            // This method helps setup default settings on the model\n            this._runModelCompatibleFunction(\"setupDefaultSettings\");\n            // Blank method for setting up questions before rendering\n            this.setupQuestion();\n\n        },\n\n        // Used in the question view to disabled the question when _isEnabled has been set to false\n        onEnabledChanged: function(model, changedAttribute) {\n\n            // If isEnabled == false add disabled class\n            // else remove disabled class\n            if (!changedAttribute) {\n                this.$('.component-widget').addClass('disabled');\n                this.disableQuestion();\n            } else {\n                this.$('.component-widget').removeClass('disabled');\n                this.enableQuestion();\n            }\n\n        },\n\n        // Used by the question to disable the question during submit and complete stages\n        disableQuestion: function() {},\n\n        // Used by the question to enable the question during interactions\n        enableQuestion: function() {},\n\n        // Used to check if the question should reset on revisit\n        checkIfResetOnRevisit: function() {\n\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            // Call blank method for question to handle\n            if (isResetOnRevisit) {\n\n                this.model.reset(isResetOnRevisit, true);\n\n                 // Defer is added to allow the component to render\n                _.defer(_.bind(function() {\n                   this.resetQuestionOnRevisit(isResetOnRevisit);\n                }, this));\n\n            } else {\n\n                // If complete - display users answer\n                // or reset the question if not complete\n                var isInteractionComplete = this.model.get('_isInteractionComplete');\n\n                if (isInteractionComplete) {\n                    this.model.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    // Defer is added to allow the component to render\n                    _.defer(_.bind(function() {\n                        this.onHideCorrectAnswerClicked();\n                    }, this));\n\n                } else {\n                    this.model.set('_buttonState', BUTTON_STATE.SUBMIT);\n                    // Defer is added to allow the component to render\n                    _.defer(_.bind(function() {\n                        this.onResetClicked();\n                    }, this));\n                }\n\n            }\n\n        },\n\n        // Used by the question to reset the question when revisiting the component\n        resetQuestionOnRevisit: function(type) {},\n\n        // Left blank for question setup - should be used instead of preRender\n        setupQuestion: function() {},\n\n        // Calls default methods to setup after the question is rendered\n        postRender: function() {\n            this.addButtonsView();\n            this.onQuestionRendered();\n        },\n\n        // Used to setup buttonsView and sets up the internal events for the question\n        addButtonsView: function() {\n            this.buttonsView = new ButtonsView({model: this.model, el: this.$('.buttons')});\n\n            this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);\n\n        },\n\n        onButtonStateUpdate: function(button_state) {\n\n            switch (button_state) {\n                case BUTTON_STATE.SUBMIT:\n                    this.onSubmitClicked();\n                    break;\n                case BUTTON_STATE.RESET:\n                    this.onResetClicked();\n                    break;\n                case BUTTON_STATE.SHOW_CORRECT_ANSWER:\n                    this.onShowCorrectAnswerClicked();\n                    break;\n                case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                    this.onHideCorrectAnswerClicked();\n                    break;\n                case BUTTON_STATE.SHOW_FEEDBACK:\n                    this.showFeedback();\n                    break;\n            }\n\n        },\n\n        // Blank method used just like postRender is for presentational components\n        onQuestionRendered: function() {},\n\n        //////\n        // Submit process\n        ////\n\n        // Triggered when the submit button is clicked\n        onSubmitClicked: function() {\n            // canSubmit is setup in questions and should return a boolean\n            // If the question stops the user form submitting - show instruction error\n            // and give a blank method, onCannotSubmit to the question\n            var canSubmit = this._runModelCompatibleFunction(\"canSubmit\");\n\n            if(!canSubmit) {\n                this.showInstructionError();\n                this.onCannotSubmit();\n                return;\n            }\n\n            // Used to update the amount of attempts the question has\n            this._runModelCompatibleFunction(\"updateAttempts\");\n\n            // Used to set attributes on the model after being submitted\n            // Also adds a class of submitted\n            this._runModelCompatibleFunction(\"setQuestionAsSubmitted\");\n\n            // Used to remove instruction error that is set when\n            // the user has interacted in the wrong way\n            this.removeInstructionError();\n\n            // Used to store the users answer for later\n            // This is a blank method given to the question\n            this._runModelCompatibleFunction(\"storeUserAnswer\");\n\n            // Used to set question as correct:true/false\n            // Calls isCorrect which is blank for the question\n            // to fill out and return a boolean\n            this._runModelCompatibleFunction(\"markQuestion\", \"isCorrect\");\n\n            // Used by the question to set the score on the model\n            this._runModelCompatibleFunction(\"setScore\");\n\n            // Used by the question to display markings on the component\n            this.showMarking();\n\n            // Used to check if the question is complete\n            // Triggers setCompletionStatus and adds class to widget\n            this._runModelCompatibleFunction(\"checkQuestionCompletion\");\n\n            this.recordInteraction();\n\n            // Used to setup the feedback by checking against\n            // question isCorrect or isPartlyCorrect\n            this._runModelCompatibleFunction(\"setupFeedback\");\n\n            // Used to update buttonsView based upon question state\n            // Update buttons happens before showFeedback to preserve tabindexes and after setupFeedback to allow buttons to use feedback attribute\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            // Used to trigger an event so plugins can display feedback\n            this.showFeedback();\n\n            this.onSubmitted();\n        },\n\n        // Adds a validation error class when the canSubmit returns false\n        showInstructionError: function() {\n            this.$(\".component-instruction-inner\").addClass(\"validation-error\");\n            this.$el.a11y_focus();\n        },\n\n        // Blank method for question to fill out when the question cannot be submitted\n        onCannotSubmit: function() {},\n\n        // Blank method for question to fill out when the question was successfully submitted\n        onSubmitted: function() {},\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        // Also adds a 'submitted' class to the widget\n        setQuestionAsSubmitted: function() {\n            this.model.setQuestionAsSubmitted();\n            this.$(\".component-widget\").addClass(\"submitted\");\n        },\n\n        // Removes validation error class when the user canSubmit\n        removeInstructionError: function() {\n            this.$(\".component-instruction-inner\").removeClass(\"validation-error\");\n        },\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = this.model.checkQuestionCompletion();\n\n            if (isComplete) {\n                this.$('.component-widget').addClass('complete show-user-answer');\n            }\n\n        },\n\n        recordInteraction:function() {\n            if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {\n                Adapt.trigger('questionView:recordInteraction', this);\n            }\n        },\n\n        // Used to show feedback based upon whether _canShowFeedback is true\n        showFeedback: function() {\n\n            if (this.model.get('_canShowFeedback')) {\n                Adapt.trigger('questionView:showFeedback', this);\n            } else {\n                Adapt.trigger('questionView:disabledFeedback', this);\n            }\n\n        },\n\n        onResetClicked: function() {\n            this.setQuestionAsReset();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this._runModelCompatibleFunction(\"resetUserAnswer\");\n\n            this.resetQuestion();\n            if (this.model.get(\"_isReady\")) {\n                //if the model is already rendered, focus on the first tabbable element\n                //onResetClicked is called as part of the checkIfResetOnRevisit function and as a button click\n                _.defer(_.bind(function(){\n                    this.$el.a11y_focus();\n                }, this));\n            }\n        },\n\n        setQuestionAsReset: function() {\n            this.model.setQuestionAsReset();\n            this.$(\".component-widget\").removeClass(\"submitted\");\n\n            // Attempt to get the current page location\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n            if (currentModel && currentModel.get(\"_isReady\")) {\n                //if the page is ready, focus on the first tabbable item\n                //otherwise will try to set focus as page loads and components are rendered\n                this.$el.a11y_focus();\n            }\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        // This could also include resetting item data\n        // This is triggered when the reset button is clicked so it shouldn't\n        // be a full reset\n        resetQuestion: function() {},\n\n        refresh: function() {\n            this.renderState();\n            \n            this.model.set('_buttonState', this.model.getButtonState());\n\n            if (this.model.get('_canShowMarking') && this.model.get('_isInteractionComplete') && this.model.get('_isSubmitted')) {\n                this.showMarking();\n            }\n\n            if (this.buttonsView) {\n                _.defer(_.bind(this.buttonsView.refresh, this.buttonsView));\n            }\n        },\n\n        onShowCorrectAnswerClicked: function() {\n            this.setQuestionAsShowCorrect();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this.showCorrectAnswer();\n        },\n\n        setQuestionAsShowCorrect: function() {\n            this.$(\".component-widget\")\n                .addClass(\"submitted show-correct-answer\")\n                .removeClass(\"show-user-answer\");\n        },\n\n        // Used by the question to display the correct answer to the user\n        showCorrectAnswer: function() {},\n\n        onHideCorrectAnswerClicked: function() {\n            this.setQuestionAsHideCorrect();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this.hideCorrectAnswer();\n        },\n\n        setQuestionAsHideCorrect: function() {\n            this.$(\".component-widget\")\n                .addClass(\"submitted show-user-answer\")\n                .removeClass(\"show-correct-answer\");\n        },\n\n        // Used by the question to display the users answer and\n        // hide the correct answer\n        // Should use the values stored in storeUserAnswer\n        hideCorrectAnswer: function() {},\n\n        // Time elapsed between the time the interaction was made available to the learner for response and the time of the first response\n        getLatency:function() {\n            return null;\n        },\n\n        // This function is overridden if useQuestionModeOnly: false. see below.\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\n            return this.model[name](); //questionModel Only\n        }\n\n    }, {\n        _isQuestionType: true\n    });\n\n\n    //allows us to turn on and off the questionView style and use the separated questionModel+questionView style only\n    if (useQuestionModelOnly) return QuestionView;\n\n    /*BACKWARDS COMPATIBILITY SECTION\n    * This section below is only for compatibility between the separated questionView+questionModel and the old questionView\n    * Remove this section in when all components use questionModel and there is no need to have model behaviour in the questionView\n    */\n\n    var viewOnlyCompatibleQuestionView = {\n\n        /* All of these functions have been moved to the questionModel.js file.\n         * On the rare occasion that they have not been overridden by the component and\n                that they call the view only questionView version,\n                these functions are included as redirects to the new Question Model.\n                It is very unlikely that these are needed but they are included to ensure compatibility.\n         * If you need to override these in your component you should now make and register a component model.\n         * Please remove them from your question component's view.\n        */\n\n            // Returns an object specific to the question type.\n            getInteractionObject: function() {\n                return this.model.getInteractionObject();\n            },\n\n            // Retturns a string detailing how the user answered the question.\n            getResponse: function() {\n                return this.model.getResponse();\n            },\n\n            // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\n            getResponseType: function() {\n                return this.model.getResponseType();\n            },\n            \n            // Calls default methods to setup on questions\n            setupDefaultSettings: function() {\n                return this.model.setupDefaultSettings();\n            },\n\n            // Used to setup either global or local button text\n            setupButtonSettings: function() {\n                return this.model.setupButtonSettings();\n            },\n\n            // Used to setup either global or local question weight/score\n            setupWeightSettings: function() {\n                return this.model.setupWeightSettings();\n            },\n\n            // Use to check if the user is allowed to submit the question\n            // Maybe the user has to select an item?\n            canSubmit: function() {\n                return this.model.canSubmit();\n            },\n\n            // Used to update the amount of attempts the user has left\n            updateAttempts: function() {\n                return this.model.updateAttempts();\n            },\n\n            // This is important for returning or showing the users answer\n            // This should preserve the state of the users answers\n            storeUserAnswer: function() {\n                return this.model.storeUserAnswer();\n            },\n\n            // Used by the question view to reset the stored user answer\n            resetUserAnswer: function() {\n                return this.model.resetUserAnswer();\n            },\n\n            // Sets _isCorrect:true/false based upon isCorrect method below\n            markQuestion: function() {\n\n                if (this._isInViewOnlyCompatibleMode(\"isCorrect\")) {\n\n                    if (this.isCorrect()) {\n                        this.model.set('_isCorrect', true);\n                    } else {\n                        this.model.set('_isCorrect', false);\n                    }\n\n                } else {\n                    return this.model.markQuestion();\n                }\n            },\n\n            // Should return a boolean based upon whether to question is correct or not\n            isCorrect: function() {\n                return this.model.isCorrect();\n            },\n\n            // Used to set the score based upon the _questionWeight\n            setScore: function() {\n                return this.model.setScore();\n            },\n\n            // Updates buttons based upon question state by setting\n            // _buttonState on the model which buttonsView listens to\n            updateButtons: function() {\n                return this.model.updateButtons();\n            },\n\n            // Used to setup the correct, incorrect and partly correct feedback\n            setupFeedback: function() {\n\n                if (this._isInViewOnlyCompatibleMode(\"isPartlyCorrect\")) {\n\n                    // Use view based feedback where necessary\n                    if (this.model.get('_isCorrect')) {\n                        this._runModelCompatibleFunction(\"setupCorrectFeedback\");\n                    } else if (this.isPartlyCorrect()) {\n                        this._runModelCompatibleFunction(\"setupPartlyCorrectFeedback\");\n                    } else {\n                        this._runModelCompatibleFunction(\"setupIncorrectFeedback\");\n                    }\n\n                } else {\n                    // Use model based feedback\n                    this.model.setupFeedback();\n                }\n\n            },\n\n            // Used by the question to determine if the question is incorrect or partly correct\n            // Should return a boolean\n            isPartlyCorrect: function() {\n                return this.model.isPartlyCorrect();\n            },\n\n            setupCorrectFeedback: function() {\n                return this.model.setupCorrectFeedback();\n            },\n\n            setupPartlyCorrectFeedback: function() {\n                return this.model.setupPartlyCorrectFeedback();\n            },\n\n            setupIncorrectFeedback: function() {\n                return this.model.setupIncorrectFeedback();\n            },\n\n\n        //Helper functions for compatibility layer\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\n            if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {\n                return this[name](); //questionView\n            } else {\n                return this.model[name](); //questionModel\n            }\n        },\n\n        _isInViewOnlyCompatibleMode: function(name, lookForViewOnlyFunction) {\n            //return false uses the model function questionModel\n            //return true uses the view only function questionView\n\n            var checkForFunction = (lookForViewOnlyFunction || name);\n\n            //if the function does NOT exist on the view at all, use the model only\n            if (!this.constructor.prototype[checkForFunction]) return false; //questionModel\n\n            //if the function DOES exist on the view and MATCHES the compatibility function above, use the model only\n            if (this.constructor.prototype[checkForFunction] === viewOnlyCompatibleQuestionView[checkForFunction])  {\n                switch (checkForFunction) {\n                    case \"setupFeedback\":\n                    case \"markQuestion\": \n                        return true; //questionView\n                }\n                return false; //questionModel\n            }\n\n            //if the function DOES exist on the view and does NOT match the compatibility function above, use the view function\n            return true; //questionView\n        }\n\n    };\n\n    //return question view class extended with the compatibility layer\n    return QuestionView.extend(viewOnlyCompatibleQuestionView, {\n        _isQuestionType: true\n    });\n\n    /*END OF BACKWARDS COMPATIBILITY SECTION*/\n\n});\n\n","define('components/adapt-contrib-mcq/js/mcqView',[\n    'core/js/views/questionView'\n], function(QuestionView) {\n\n    var McqView = QuestionView.extend({\n\n        events: {\n            'focus .mcq-item input':'onItemFocus',\n            'blur .mcq-item input':'onItemBlur',\n            'change .mcq-item input':'onItemSelected',\n            'keyup .mcq-item input':'onKeyPress'\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled(true);\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.model.setupRandomisation();\n        },\n\n        disableQuestion: function() {\n            this.setAllItemsEnabled(false);\n        },\n\n        enableQuestion: function() {\n            this.setAllItemsEnabled(true);\n        },\n\n        setAllItemsEnabled: function(isEnabled) {\n            _.each(this.model.get('_items'), function(item, index){\n                var $itemLabel = this.$('label').eq(index);\n                var $itemInput = this.$('input').eq(index);\n\n                if (isEnabled) {\n                    $itemLabel.removeClass('disabled');\n                    $itemInput.prop('disabled', false);\n                } else {\n                    $itemLabel.addClass('disabled');\n                    $itemInput.prop('disabled', true);\n                }\n            }, this);\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n            if (!this.model.get(\"_isSubmitted\")) return;\n            this.showMarking();\n        },\n\n        onKeyPress: function(event) {\n            if (event.which === 13) { //<ENTER> keypress\n                this.onItemSelected(event);\n            }\n        },\n\n        onItemFocus: function(event) {\n            if(this.model.get('_isEnabled') && !this.model.get('_isSubmitted')){\n                $(\"label[for='\"+$(event.currentTarget).attr('id')+\"']\").addClass('highlighted');\n            }\n        },\n        \n        onItemBlur: function(event) {\n            $(\"label[for='\"+$(event.currentTarget).attr('id')+\"']\").removeClass('highlighted');\n        },\n\n        onItemSelected: function(event) {\n            if(this.model.get('_isEnabled') && !this.model.get('_isSubmitted')){\n                var selectedItemObject = this.model.get('_items')[$(event.currentTarget).parent('.component-item').index()];\n                this.toggleItemSelected(selectedItemObject, event);\n            }\n        },\n\n        toggleItemSelected:function(item, clickEvent) {\n            var selectedItems = this.model.get('_selectedItems');\n            var itemIndex = _.indexOf(this.model.get('_items'), item),\n                $itemLabel = this.$('label').eq(itemIndex),\n                $itemInput = this.$('input').eq(itemIndex),\n                selected = !$itemLabel.hasClass('selected');\n            \n                if(selected) {\n                    if(this.model.get('_selectable') === 1){\n                        this.$('label').removeClass('selected');\n                        this.$('input').prop('checked', false);\n                        this.deselectAllItems();\n                        selectedItems[0] = item;\n                    } else if(selectedItems.length < this.model.get('_selectable')) {\n                     selectedItems.push(item);\n                 } else {\n                    clickEvent.preventDefault();\n                    return;\n                }\n                $itemLabel.addClass('selected');\n            } else {\n                selectedItems.splice(_.indexOf(selectedItems, item), 1);\n                $itemLabel.removeClass('selected');\n            }\n            $itemInput.prop('checked', selected);\n            item._isSelected = selected;\n            this.model.set('_selectedItems', selectedItems);\n        },\n\n        // Blank method to add functionality for when the user cannot submit\n        // Could be used for a popup or explanation dialog/hint\n        onCannotSubmit: function() {},\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            _.each(this.model.get('_items'), function(item, i) {\n                var $item = this.$('.component-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        resetQuestion: function() {\n            this.deselectAllItems();\n            this.resetItems();\n        },\n\n        deselectAllItems: function() {\n            this.model.deselectAllItems();\n        },\n\n        resetItems: function() {\n            this.$('.component-item label').removeClass('selected');\n            this.$('.component-item').removeClass('correct incorrect');\n            this.$('input').prop('checked', false);\n            this.model.resetItems();\n        },\n\n        showCorrectAnswer: function() {\n            _.each(this.model.get('_items'), function(item, index) {\n                this.setOptionSelected(index, item._shouldBeSelected);\n            }, this);\n        },\n\n        setOptionSelected:function(index, selected) {\n            var $itemLabel = this.$('label').eq(index);\n            var $itemInput = this.$('input').eq(index);\n            if (selected) {\n                $itemLabel.addClass('selected');\n                $itemInput.prop('checked', true);\n            } else {\n                $itemLabel.removeClass('selected');\n                $itemInput.prop('checked', false);\n            }\n        },\n\n        hideCorrectAnswer: function() {\n            _.each(this.model.get('_items'), function(item, index) {\n                this.setOptionSelected(index, this.model.get('_userAnswer')[item._index]);\n            }, this);\n        }\n    });\n\n    return McqView;\n\n});\n\n","define('components/adapt-contrib-mcq/js/mcqModel',[\n    'core/js/models/questionModel'\n], function(QuestionModel) {\n    \n    var McqModel = QuestionModel.extend({\n\n        init: function() {\n            QuestionModel.prototype.init.call(this);\n\n            this.set(\"_isRadio\", (this.get(\"_selectable\") == 1) );\n            \n            this.set('_selectedItems', []);\n\n            this.setupQuestionItemIndexes();\n        },\n\n        setupQuestionItemIndexes: function() {\n            var items = this.get(\"_items\");\n            if (items && items.length > 0) {\n                for (var i = 0, l = items.length; i < l; i++) {\n                    if (items[i]._index === undefined) items[i]._index = i;\n                }\n            }\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.get(\"_isSubmitted\")) return;\n\n            var selectedItems = [];\n            var items = this.get(\"_items\");\n            var userAnswer = this.get(\"_userAnswer\");\n            _.each(items, function(item, index) {\n                item._isSelected = userAnswer[item._index];\n                if (item._isSelected) {\n                    selectedItems.push(item);\n                }\n            });\n\n            this.set(\"_selectedItems\", selectedItems);\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            //this.showMarking();\n            this.setupFeedback();\n        },\n\n        setupRandomisation: function() {\n            if (this.get('_isRandom') && this.get('_isEnabled')) {\n                this.set(\"_items\", _.shuffle(this.get(\"_items\")));\n            }\n        },\n\n        // check if the user is allowed to submit the question\n        canSubmit: function() {\n            var count = 0;\n\n            _.each(this.get('_items'), function(item) {\n                if (item._isSelected) {\n                    count++;\n                }\n            }, this);\n\n            return (count > 0) ? true : false;\n\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {\n            var userAnswer = [];\n\n            var items = this.get('_items').slice(0);\n            items.sort(function(a, b) {\n                return a._index - b._index;\n            });\n\n            _.each(items, function(item, index) {\n                userAnswer.push(item._isSelected);\n            }, this);\n            this.set('_userAnswer', userAnswer);\n        },\n\n        isCorrect: function() {\n\n            var numberOfRequiredAnswers = 0;\n            var numberOfCorrectAnswers = 0;\n            var numberOfIncorrectAnswers = 0;\n\n            _.each(this.get('_items'), function(item, index) {\n\n                var itemSelected = (item._isSelected || false);\n\n                if (item._shouldBeSelected) {\n                    numberOfRequiredAnswers ++;\n\n                    if (itemSelected) {\n                        numberOfCorrectAnswers ++;\n                        \n                        item._isCorrect = true;\n\n                        this.set('_isAtLeastOneCorrectSelection', true);\n                    }\n\n                } else if (!item._shouldBeSelected && itemSelected) {\n                    numberOfIncorrectAnswers ++;\n                }\n\n            }, this);\n\n            this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n            this.set('_numberOfRequiredAnswers', numberOfRequiredAnswers);\n\n            // Check if correct answers matches correct items and there are no incorrect selections\n            var answeredCorrectly = (numberOfCorrectAnswers === numberOfRequiredAnswers) && (numberOfIncorrectAnswers === 0);\n            return answeredCorrectly;\n        },\n\n        // Sets the score based upon the questionWeight\n        // Can be overwritten if the question needs to set the score in a different way\n        setScore: function() {\n            var questionWeight = this.get(\"_questionWeight\");\n            var answeredCorrectly = this.get('_isCorrect');\n            var score = answeredCorrectly ? questionWeight : 0;\n            this.set('_score', score);\n        },\n\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                // apply individual item feedback\n                if((this.get('_selectable') === 1) && this.get('_selectedItems')[0].feedback) {\n                    this.setupIndividualFeedback(this.get('_selectedItems')[0]);\n                    return;\n                } else {\n                    this.setupIncorrectFeedback();\n                }\n            }\n        },\n\n        setupIndividualFeedback: function(selectedItem) {\n            this.set({\n                feedbackTitle: this.getFeedbackTitle(this.get('_feedback')),\n                feedbackMessage: selectedItem.feedback\n            });\n        },\n\n        isPartlyCorrect: function() {\n            return this.get('_isAtLeastOneCorrectSelection');\n        },\n\n        resetUserAnswer: function() {\n            this.set({_userAnswer: []});\n        },\n\n        deselectAllItems: function() {\n            _.each(this.get('_items'), function(item) {\n                item._isSelected = false;\n            }, this);\n        },\n\n        resetItems: function() {\n            this.set({\n                _selectedItems: [],\n                _isAtLeastOneCorrectSelection: false\n            });\n        },\n\n        getInteractionObject: function() {\n            var interactions = {\n                correctResponsesPattern: [],\n                choices: []\n            };\n\n            interactions.choices = this.get('_items').map(function(item) {\n                return {\n                    id: (item._index + 1).toString(),\n                    description: item.text\n                };\n            });\n\n            var correctItems = _.filter(this.get('_items'), function(item) {\n                return item._shouldBeSelected;\n            });\n\n            interactions.correctResponsesPattern = [\n                _.pluck(correctItems, '_index')\n                    .map(function(index) {\n                        return (index + 1).toString();\n                    })\n                    .join('[,]')\n            ];\n\n            return interactions;\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * returns the user's answers as a string in the format \"1,5,2\"\n        */\n        getResponse: function() {\n            var selected = _.where(this.get('_items'), {_isSelected: true});\n            var selectedIndexes = _.pluck(selected, '_index');\n            // indexes are 0-based, we need them to be 1-based for cmi.interactions\n            for (var i = 0, count = selectedIndexes.length; i < count; i++) {\n                selectedIndexes[i]++;\n            }\n            return selectedIndexes.join(',');\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType: function() {\n            return 'choice';\n        }\n\n    });\n\n    return McqModel;\n\n});\n","define('components/adapt-contrib-mcq/js/adapt-contrib-mcq',[\n    'core/js/adapt',\n    './mcqView',\n    './mcqModel'\n], function(Adapt, McqView, McqModel) {\n\n    return Adapt.register(\"mcq\", {\n        view: McqView,\n        model: McqModel\n    });\n\n});\n\n","define('components/adapt-contrib-text/js/adapt-contrib-text',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Text = ComponentView.extend({\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            this.setupInview();\n        },\n\n        setupInview: function() {\n            var selector = this.getInviewElementSelector();\n\n            if (!selector) {\n                this.setCompletionStatus();\n            } else {\n                this.model.set('inviewElementSelector', selector);\n                this.$(selector).on('inview', _.bind(this.inview, this));\n            }\n        },\n\n        /**\n         * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element\n         */\n        getInviewElementSelector: function() {\n            if(this.model.get('body')) return '.component-body';\n\n            if(this.model.get('instruction')) return '.component-instruction';\n            \n            if(this.model.get('displayTitle')) return '.component-title';\n\n            return null;\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$(this.model.get('inviewElementSelector')).off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            if(this.model.has('inviewElementSelector')) {\n                this.$(this.model.get('inviewElementSelector')).off('inview');\n            }\n            \n            ComponentView.prototype.remove.call(this);\n        }\n    },\n    {\n        template: 'text'\n    });\n\n    Adapt.register('text', Text);\n\n    return Text;\n});\n\n","define('extensions/adapt-contrib-tutor/js/adapt-contrib-tutor',[\n    'coreJS/adapt'\n],function(Adapt) {\n\n    Adapt.on('questionView:showFeedback', function(view) {\n\n        var alertObject = {\n            title: view.model.get(\"feedbackTitle\"),\n            body: view.model.get(\"feedbackMessage\")\n        };\n\n        var attributes = {};\n        var classes = [];\n\n        if (view.model.has('_isCorrect')) {\n            // Attach specific classes so that feedback can be styled.\n            if (view.model.get('_isCorrect')) {\n                classes.push('correct');\n            } else {\n                if (view.model.has('_isAtLeastOneCorrectSelection')) {\n                    // Partially correct feedback is an option.\n                    if (view.model.get('_isAtLeastOneCorrectSelection')) {\n                        classes.push('partially-correct');\n                    } else {\n                        classes.push('incorrect');\n                    }\n                } else {\n                    classes.push('incorrect');\n                }\n            }\n        }\n\n        // Add the extension/component type which triggered this.\n        if (view.model.has('_component')) {\n            classes.push('component-' + view.model.get('_component'));\n        } else if (view.model.has('_extension')) {\n            classes.push('extension-' + view.model.get('_extension'));\n        }\n\n        // Add the _id property as attribute.\n        attributes['data-adapt-id'] = view.model.get('_id');\n\n        alertObject._classes = classes.join(' ');\n        alertObject._attributes = attributes;\n\n        Adapt.once(\"notify:closed\", function() {\n            Adapt.trigger(\"tutor:closed\", view, alertObject);\n        });\n\n        Adapt.trigger('notify:popup', alertObject);\n\n        Adapt.trigger('tutor:opened', view, alertObject);\n    });\n\n});\n\n","define('core/js/views/menuView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var MenuView = AdaptView.extend({\n\n    \tclassName: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n    \t\treturn 'menu ' +\n            'menu-' +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility() +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n    \t},\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n        },\n\n        postRender: function() {\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('menuView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }.bind(this));\n            }\n        }\n\n    }, {\n        type:'menu'\n    });\n\n    return MenuView;\n\n});\n\n","define('menu/adapt-contrib-boxmenu/js/adapt-contrib-boxmenu',[\n    'core/js/adapt',\n    'core/js/views/menuView'\n], function(Adapt, MenuView) {\n\n    var BoxMenuView = MenuView.extend({\n\n        className: function() {\n            return MenuView.prototype.className.apply(this) + \" boxmenu-menu\";\n        },\n\n        postRender: function() {\n            var nthChild = 0;\n            this.model.getChildren().each(function(item) {\n                if (item.get('_isAvailable') && !item.get('_isHidden')) {\n                    item.set('_nthChild', ++nthChild);\n                    this.$('.menu-container-inner').append(new BoxMenuItemView({model: item}).$el);\n                }\n\n                if(item.get('_isHidden')) {\n                    item.set('_isReady', true);\n                }\n            });\n        }\n\n    }, {\n        template: 'boxmenu'\n    });\n\n    var BoxMenuItemView = MenuView.extend({\n\n        events: {\n            'click button' : 'onClickMenuItemButton'\n        },\n\n        className: function() {\n            var nthChild = this.model.get('_nthChild');\n            return [\n                'menu-item',\n                'menu-item-' + this.model.get('_id') ,\n                this.model.get('_classes'),\n                this.model.get('_isVisited') ? 'visited' : '',\n                this.model.get('_isComplete') ? 'completed' : '',\n                this.model.get('_isLocked') ? 'locked' : '',\n                'nth-child-' + nthChild,\n                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'\n            ].join(' ');\n        },\n\n        preRender: function() {\n            this.model.checkCompletionStatus();\n            this.model.checkInteractionCompletionStatus();\n        },\n\n        postRender: function() {\n            var graphic = this.model.get('_graphic');\n            if (graphic && graphic.src && graphic.src.length > 0) {\n                this.$el.imageready(_.bind(function() {\n                    this.setReadyStatus();\n                }, this));\n            } else {\n                this.setReadyStatus();\n            }\n        },\n\n        onClickMenuItemButton: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});\n        }\n\n    }, {\n        template: 'boxmenu-item'\n    });\n\n    Adapt.on('router:menu', function(model) {\n\n        $('#wrapper').append(new BoxMenuView({model: model}).$el);\n\n    });\n\n});\n\n","define('theme/adapt-kineo-theme/js/themeView',[ \"core/js/adapt\" ], function(Adapt) {\n\n\tvar ThemeView = Backbone.View.extend({\n\n\t\tclassName: function() {},\n\n\t\tinitialize: function() {\n\t\t\tthis.setStyles();\n\n\t\t\tthis.listenTo(Adapt, {\n\t\t\t\t\"device:resize\": this.onDeviceResize,\n\t\t\t\t\"remove\": this.remove\n\t\t\t});\n\t\t},\n\n\t\tonDeviceResize: function() {\n\t\t\tthis.setStyles();\n\t\t},\n\n\t\tremove: function() {\n\t\t\tBackbone.View.prototype.remove.call(this);\n\n\t\t\tthis.onRemove();\n\t\t},\n\n\t\tsetStyles: function() {\n\t\t\tthis.setClasses();\n\t\t\tthis.setBackground();\n\t\t\tthis.setCustomStyles();\n\t\t},\n\n\t\tsetClasses: function() {\n\t\t\tthis.$el.addClass(this.className());\n\t\t},\n\n\t\tsetBackground: function() {\n\t\t\tvar backgroundImages = this.model.get(\"_backgroundImage\");\n\n\t\t\tif (!backgroundImages) return;\n\n\t\t\tvar backgroundImage;\n\n\t\t\tswitch (Adapt.device.screenSize) {\n\t\t\t\tcase \"large\":\n\t\t\t\t\tbackgroundImage = backgroundImages._large;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"medium\":\n\t\t\t\t\tbackgroundImage = backgroundImages._medium;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbackgroundImage = backgroundImages._small;\n\t\t\t}\n\n\t\t\tif (!backgroundImage) return;\n\n\t\t\tthis.$el\n\t\t\t\t.addClass(\"has-background-image\")\n\t\t\t\t.css(\"background-image\", \"url(\" + backgroundImage + \")\");\n\t\t},\n\n\t\tsetCustomStyles: function() {},\n\n\t\tonRemove: function() {}\n\n\t});\n\n\treturn ThemeView;\n\n});\n\n","define('theme/adapt-kineo-theme/js/themePageView',[ \"./themeView\", \"core/js/adapt\" ], function(ThemeView, Adapt) {\n\n\tvar ThemePageView = ThemeView.extend({\n\n\t\tclassName: function() {\n\t\t\treturn this.model.get(\"_classes\");\n\t\t},\n\n\t\tevents: {\n\t\t\t\"click .page-header-scroll-button-inner\": \"onScrollButtonClick\"\n\t\t},\n\n\t\tsetCustomStyles: function() {\n\t\t\tthis.setThemePalette();\n\t\t\tthis.processHeaderAndFooter();\n\t\t},\n\n\t\tsetThemePalette: function() {\n\t\t\t$(\"html\").addClass(this.model.get(\"_themePalette\"));\n\t\t},\n\n\t\tprocessHeaderAndFooter: function() {\n\t\t\tvar header = this.model.get(\"_pageHeader\");\n\t\t\tvar footer = this.model.get(\"_pageFooter\");\n\t\t\tvar $header = this.$(\".page-header\");\n\t\t\tvar $footer = this.$(\".page-footer\");\n\n\t\t\tif (header) {\n\t\t\t\tthis.setElementBackground($header, header);\n\t\t\t\tthis.setElementMinHeight($header, header);\n\t\t\t}\n\n\t\t\tif (footer) {\n\t\t\t\tthis.setElementBackground($footer, footer);\n\t\t\t\tthis.setElementMinHeight($footer, footer);\n\t\t\t}\n\t\t},\n\n\t\tsetElementBackground: function($element, config) {\n\t\t\tvar backgroundImages = config._backgroundImage;\n\n\t\t\tif (!backgroundImages) return;\n\n\t\t\tvar backgroundImage;\n\n\t\t\tswitch (Adapt.device.screenSize) {\n\t\t\t\tcase \"large\":\n\t\t\t\t\tbackgroundImage = backgroundImages._large;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"medium\":\n\t\t\t\t\tbackgroundImage = backgroundImages._medium;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbackgroundImage = backgroundImages._small;\n\t\t\t}\n\n\t\t\tif (!backgroundImage) return;\n\n\t\t\t$element\n\t\t\t\t.addClass(\"has-background-image\")\n\t\t\t\t.css(\"background-image\", \"url(\" + backgroundImage + \")\");\n\t\t},\n\n\t\tsetElementMinHeight: function($element, config) {\n\t\t\tvar minHeights = config._minimumHeights;\n\n\t\t\tif (!minHeights) return;\n\n\t\t\tvar minHeight;\n\n\t\t\tswitch (Adapt.device.screenSize) {\n\t\t\t\tcase \"large\":\n\t\t\t\t\tminHeight = minHeights._large;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"medium\":\n\t\t\t\t\tminHeight = minHeights._medium;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tminHeight = minHeights._small;\n\t\t\t}\n\n\t\t\tif (minHeight) $element.css(\"min-height\", minHeight + \"px\");\n\t\t},\n\n\t\tonScrollButtonClick: function() {\n\t\t\tAdapt.scrollTo('.article', { duration: 800 });\n\t\t},\n\n\t\tonRemove: function() {\n\t\t\t$(\"html\").removeClass(this.model.get(\"_themePalette\"));\n\t\t}\n\n\t});\n\n\treturn ThemePageView;\n\n});\n\n","define('theme/adapt-kineo-theme/js/themeArticleView',[ \"./themeView\", \"core/js/adapt\" ], function(ThemeView, Adapt) {\n\n\tvar ThemeArticleView = ThemeView.extend({\n\n\t\tclassName: function() {},\n\n\t\tsetCustomStyles: function() {},\n\n\t\tonRemove: function() {}\n\n\t});\n\n\treturn ThemeArticleView;\n\n});\n\n","define('theme/adapt-kineo-theme/js/themeBlockView',[ \"./themeView\", \"core/js/adapt\" ], function(ThemeView, Adapt) {\n\n\tvar ThemeBlockView = ThemeView.extend({\n\n\t\tclassName: function() {\n\t\t\treturn this.model.get(\"_isDividerBlock\") ? \"divider-block\" : \"\";\n\t\t},\n\n\t\tsetCustomStyles: function() {\n\t\t\tthis.setMinHeight();\n\t\t},\n\n\t\tsetMinHeight: function() {\n\t\t\tvar minHeights = this.model.get(\"_minimumHeights\");\n\n\t\t\tif (!minHeights) return;\n\n\t\t\tvar minHeight;\n\n\t\t\tswitch (Adapt.device.screenSize) {\n\t\t\t\tcase \"large\":\n\t\t\t\t\tminHeight = minHeights._large;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"medium\":\n\t\t\t\t\tminHeight = minHeights._medium;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tminHeight = minHeights._small;\n\t\t\t}\n\n\t\t\tif (minHeight) this.$el.css(\"min-height\", minHeight + \"px\");\n\t\t},\n\n\t\tonRemove: function() {}\n\t});\n\n\treturn ThemeBlockView;\n\n});\n\n","define('theme/adapt-kineo-theme/js/theme',[\n\t\"core/js/adapt\",\n\t\"./themePageView\",\n\t\"./themeArticleView\",\n\t\"./themeBlockView\",\n\t\"./themeView\"\n], function(Adapt, ThemePageView, ThemeArticleView, ThemeBlockView, ThemeView) {\n\n\tfunction onDataReady() {\n\t\t$(\"html\").addClass(Adapt.course.get(\"_courseStyle\"));\n\t}\n\n\tfunction onPostRender(view) {\n\t\tvar model = view.model;\n\t\tvar theme = model.get(\"_theme\");\n\n\t\tif (!theme) return;\n\n\t\tswitch (model.get(\"_type\")) {\n\t\t\tcase \"page\":\n\t\t\t\tnew ThemePageView({ model: new Backbone.Model(theme), el: view.$el });\n\t\t\t\tbreak;\n\t\t\tcase \"article\":\n\t\t\t\tnew ThemeArticleView({ model: new Backbone.Model(theme), el: view.$el });\n\t\t\t\tbreak;\n\t\t\tcase \"block\":\n\t\t\t\tnew ThemeBlockView({ model: new Backbone.Model(theme), el: view.$el });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnew ThemeView({ model: new Backbone.Model(theme), el: view.$el });\n\t\t}\n\t}\n\n\tAdapt.on({\n\t\t\"app:dataReady\": onDataReady,\n\t\t\"pageView:postRender articleView:postRender blockView:postRender\": onPostRender\n\t});\n});\n\n",";\ndefine(\"plugins\", [\"components/adapt-contrib-graphic/js/adapt-contrib-graphic\",\"components/adapt-contrib-mcq/js/adapt-contrib-mcq\",\"components/adapt-contrib-text/js/adapt-contrib-text\",\"extensions/adapt-contrib-tutor/js/adapt-contrib-tutor\",\"menu/adapt-contrib-boxmenu/js/adapt-contrib-boxmenu\",\"theme/adapt-kineo-theme/js/theme\"], function(){});\n\n","require([\n    'core/js/adapt',\n    'core/js/adaptCollection',\n    'core/js/startController',\n    'core/js/models/buildModel',\n    'core/js/models/articleModel',\n    'core/js/models/blockModel',\n    'core/js/models/configModel',\n    'core/js/models/contentObjectModel',\n    'core/js/models/componentModel',\n    'core/js/models/courseModel',\n    'core/js/models/questionModel',\n    'core/js/views/navigationView',\n    'core/js/accessibility',\n    'core/js/offlineStorage',\n    'core/js/logging',\n    'core/js/tracking',\n    'core/js/device',\n    'core/js/drawer',\n    'core/js/notify',\n    'core/js/popupManager',\n    'core/js/router',\n    'core/js/models/lockingModel',\n    'core/js/helpers',\n    'plugins'\n], function (Adapt, AdaptCollection, StartController, BuildModel, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel, NavigationView) {\n\n    // Append loading template and show\n    window.Handlebars = _.extend(require(\"handlebars\"), window.Handlebars);\n\n    var template = Handlebars.templates['loading'];\n    $('#wrapper').append(template());\n\n    Adapt.build = new BuildModel(null, {url: \"adapt/js/build.min.js\", reset:true});\n\n    // This function is called anytime a course object is loaded\n    // Once all course files are loaded trigger events and call Adapt.initialize\n    Adapt.checkDataIsLoaded = function(newLanguage) {\n        if (Adapt.contentObjects.models.length > 0 &&\n            Adapt.articles.models.length > 0 &&\n            Adapt.blocks.models.length > 0 &&\n            Adapt.components.models.length > 0 &&\n            Adapt.course.get('_id')) {\n\n            configureInview();\n\n            mapAdaptIdsToObjects();\n\n            Adapt.log.debug('Firing app:dataLoaded');\n\n            try {\n                Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js\n            } catch(e) {\n                Adapt.log.error('Error during app:dataLoading trigger', e);\n            }\n\n            Adapt.setupMapping();\n\n            Adapt.wait.queue(function() {\n                triggerDataReady(newLanguage);\n            });\n\n        }\n    };\n\n    function triggerDataReady(newLanguage) {\n        if (newLanguage) {\n\n            Adapt.trigger('app:languageChanged', newLanguage);\n\n            _.defer(function() {\n                var startController = new StartController();\n                var hash = '#/';\n\n                if (startController.isEnabled()) {\n                    hash = startController.getStartHash(true);\n                }\n\n                Backbone.history.navigate(hash, { trigger: true, replace: true });\n            });\n        }\n\n        Adapt.log.debug('Firing app:dataReady');\n\n        try {\n            Adapt.trigger('app:dataReady');\n        } catch(e) {\n            Adapt.log.error('Error during app:dataReady trigger', e);\n        }\n\n        Adapt.wait.queue(triggerInitialize);\n\n    }\n\n    function triggerInitialize() {\n        Adapt.log.debug('Calling Adapt.initialize');\n\n        addNavigationBar();\n\n        Adapt.initialize();\n\n        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');\n    }\n\n    function addNavigationBar() {\n\n        var adaptConfig = Adapt.course.get(\"_navigation\");\n\n        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {\n            Adapt.trigger(\"navigation:initialize\");\n            return;\n        }\n\n        Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation\n\n    }\n\n    function configureInview() {\n\n        var adaptConfig = Adapt.config.get(\"_inview\");\n\n        var allowScrollOver = (adaptConfig && adaptConfig._allowScrollOver === false ? false : true);\n\n        $.inview.config({\n            allowScrollOver: allowScrollOver\n        });\n\n    }\n\n    function mapAdaptIdsToObjects () {\n        Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy(\"_id\");\n        Adapt.articles._byAdaptID = Adapt.articles.groupBy(\"_id\");\n        Adapt.blocks._byAdaptID = Adapt.blocks.groupBy(\"_id\");\n        Adapt.components._byAdaptID = Adapt.components.groupBy(\"_id\");\n    }\n\n    // This function is called when the config model triggers 'configModel:loadCourseData'\n    // Once the config model is loaded get the course files\n    // This enables plugins to tap in before the course files are loaded & also to change the default language\n    Adapt.loadCourseData = function(newLanguage) {\n        Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {\n            Adapt.checkDataIsLoaded(newLanguage);\n        });\n\n        // All code that needs to run before adapt starts should go here\n        var language = Adapt.config.get('_activeLanguage');\n        var jsonext = Adapt.build.get(\"jsonext\");\n        var courseFolder = \"course/\" + language +\"/\";\n\n        $('html').attr(\"lang\", language);\n\n        Adapt.course = new CourseModel(null, {url:courseFolder + \"course.\"+jsonext, reset:true});\n\n        Adapt.contentObjects = new AdaptCollection(null, {\n            model: ContentObjectModel,\n            url: courseFolder +\"contentObjects.\"+jsonext\n        });\n\n        Adapt.articles = new AdaptCollection(null, {\n            model: ArticleModel,\n            url: courseFolder + \"articles.\"+jsonext\n        });\n\n        Adapt.blocks = new AdaptCollection(null, {\n            model: BlockModel,\n            url: courseFolder + \"blocks.\"+jsonext\n        });\n\n        Adapt.components = new AdaptCollection(null, {\n            model: function(json) {\n\n                //use view+model object\n                var ViewModelObject = Adapt.componentStore[json._component];\n\n                if(!ViewModelObject) {\n                    throw new Error(json._component + ' component not found. Is it installed and included?');\n                }\n\n                //if model defined for component use component model\n                if (ViewModelObject.model) {\n                    return new ViewModelObject.model(json);\n                }\n\n                var View = ViewModelObject.view || ViewModelObject;\n                //if question type use question model\n                if (View._isQuestionType) {\n                    return new QuestionModel(json);\n                }\n\n                //otherwise use component model\n                return new ComponentModel(json);\n            },\n            url: courseFolder + \"components.\"+jsonext\n        });\n    };\n\n    function onLanguageChange(model, language) {\n        Adapt.offlineStorage.set('lang', language);\n        Adapt.loadCourseData(language);\n    }\n\n    function onDirectionChange(model, direction) {\n        if (direction === 'rtl') {\n            $('html').removeClass('dir-ltr').addClass('dir-rtl').attr('dir', 'rtl');\n        } else {\n            $('html').removeClass('dir-rtl').addClass('dir-ltr').attr('dir', 'ltr');\n        }\n    }\n\n    /**\n    * Before we actually go to load the course data, we first need to check to see if a language has been set\n    * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json\n    */\n    function onLoadCourseData() {\n        if (Adapt.config.get('_activeLanguage')) {\n            Adapt.loadCourseData();\n        } else {\n            Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));\n        }\n    }\n\n    function onBuildDataLoaded() {\n\n        Adapt.config = new ConfigModel(null, {url: \"course/config.\"+Adapt.build.get(\"jsonext\"), reset:true});\n        Adapt.config.on({\n            'change:_activeLanguage': onLanguageChange,\n            'change:_defaultDirection': onDirectionChange\n        });\n\n        // Events that are triggered by the main Adapt content collections and models\n        Adapt.once('configModel:loadCourseData', onLoadCourseData);\n\n    }\n\n    Adapt.once('buildModel:dataLoaded', onBuildDataLoaded);\n\n});\n\ndefine(\"core/js/app\", function(){});\n\n"]}